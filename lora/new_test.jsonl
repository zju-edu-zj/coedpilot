{"docstring_tokens": "import logging", "code_tokens": " <mask> import json\n <mask> import os\n <mask> import socket\n <mask> from threading import RLock\n <mask> \n <mask> from filelock import FileLock\n <mask> \n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove from filelock import FileLock\nfrom threading import RLock\n </s> add  </s> remove import logging\n </s> add from threading import RLock\n\nfrom filelock import FileLock </s> remove from threading import RLock\n </s> add ", "label_window": ["add", "keep", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/local/node_provider.py"}
{"docstring_tokens": "from threading import RLock\n\nfrom filelock import FileLock", "code_tokens": " <mask> from threading import RLock\n <mask> import json\n <mask> import os\n <mask> import socket\n <mask> import logging\n <mask> \n <mask> from ray.autoscaler.node_provider import NodeProvider\n <mask> from ray.autoscaler.tags import (\n <mask>     TAG_RAY_NODE_KIND,\n <mask>     NODE_KIND_WORKER,\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove from filelock import FileLock\nfrom threading import RLock\n </s> add  </s> remove     TAG_RAY_NODE_KIND,\n    NODE_KIND_WORKER,\n </s> add  </s> remove     TAG_RAY_NODE_KIND,\n </s> add ", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/local/node_provider.py"}
{"docstring_tokens": "from ray.autoscaler._private.local.config import (\n    LOCAL_CLUSTER_NODE_TYPE,\n    bootstrap_local,\n    get_lock_path,\n    get_state_path,\n)", "code_tokens": " <mask> from threading import RLock\n <mask> \n <mask> from filelock import FileLock\n <mask> \n <mask> from ray.autoscaler.node_provider import NodeProvider\n <mask> from ray.autoscaler.tags import (\n <mask>     NODE_KIND_HEAD,\n <mask>     NODE_KIND_WORKER,\n <mask>     STATUS_UP_TO_DATE,\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove import logging\n </s> add from threading import RLock\n\nfrom filelock import FileLock </s> remove     TAG_RAY_NODE_KIND,\n    NODE_KIND_WORKER,\n </s> add  </s> remove from filelock import FileLock\nfrom threading import RLock\n </s> add  </s> remove     TAG_RAY_NODE_KIND,\n </s> add ", "label_window": ["keep", "keep", "keep", "add", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/local/node_provider.py"}
{"docstring_tokens": "", "code_tokens": " <mask> import logging\n <mask> \n <mask> from ray.autoscaler.node_provider import NodeProvider\n <mask> from ray.autoscaler.tags import (\n <mask>     TAG_RAY_NODE_KIND,\n <mask>     NODE_KIND_WORKER,\n <mask>     NODE_KIND_HEAD,\n <mask>     TAG_RAY_USER_NODE_TYPE,\n <mask>     TAG_RAY_NODE_NAME,\n <mask>     TAG_RAY_NODE_STATUS,\n <mask>     STATUS_UP_TO_DATE,\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove     TAG_RAY_USER_NODE_TYPE,\n </s> add     NODE_KIND_WORKER,\n    STATUS_UP_TO_DATE,\n    TAG_RAY_NODE_KIND, </s> remove     TAG_RAY_NODE_KIND,\n </s> add  </s> remove     TAG_RAY_USER_NODE_TYPE,\n </s> add     STATUS_UP_TO_DATE,\n    TAG_RAY_NODE_KIND, </s> remove     STATUS_UP_TO_DATE,\n </s> add     TAG_RAY_USER_NODE_TYPE, </s> remove     STATUS_UP_TO_DATE,\n </s> add     TAG_RAY_USER_NODE_TYPE,", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/local/node_provider.py"}
{"docstring_tokens": "    NODE_KIND_WORKER,\n    STATUS_UP_TO_DATE,\n    TAG_RAY_NODE_KIND,", "code_tokens": " <mask> from ray.autoscaler.tags import (\n <mask>     TAG_RAY_NODE_KIND,\n <mask>     NODE_KIND_WORKER,\n <mask>     NODE_KIND_HEAD,\n <mask>     TAG_RAY_USER_NODE_TYPE,\n <mask>     TAG_RAY_NODE_NAME,\n <mask>     TAG_RAY_NODE_STATUS,\n <mask>     STATUS_UP_TO_DATE,\n <mask> )\n <mask> from ray.autoscaler._private.local.config import bootstrap_local\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove     TAG_RAY_USER_NODE_TYPE,\n </s> add     STATUS_UP_TO_DATE,\n    TAG_RAY_NODE_KIND, </s> remove     STATUS_UP_TO_DATE,\n </s> add     TAG_RAY_USER_NODE_TYPE, </s> remove     TAG_RAY_NODE_KIND,\n    NODE_KIND_WORKER,\n </s> add  </s> remove     TAG_RAY_NODE_KIND,\n </s> add  </s> remove from ray.autoscaler._private.local.config import bootstrap_local\nfrom ray.autoscaler._private.local.config import get_lock_path\nfrom ray.autoscaler._private.local.config import get_state_path\nfrom ray.autoscaler._private.local.config import LOCAL_CLUSTER_NODE_TYPE\n </s> add ", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/local/node_provider.py"}
{"docstring_tokens": "    TAG_RAY_USER_NODE_TYPE,", "code_tokens": " <mask>     NODE_KIND_HEAD,\n <mask>     TAG_RAY_USER_NODE_TYPE,\n <mask>     TAG_RAY_NODE_NAME,\n <mask>     TAG_RAY_NODE_STATUS,\n <mask>     STATUS_UP_TO_DATE,\n <mask> )\n <mask> from ray.autoscaler._private.local.config import bootstrap_local\n <mask> from ray.autoscaler._private.local.config import get_lock_path\n <mask> from ray.autoscaler._private.local.config import get_state_path\n <mask> from ray.autoscaler._private.local.config import LOCAL_CLUSTER_NODE_TYPE\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove from ray.autoscaler._private.local.config import bootstrap_local\nfrom ray.autoscaler._private.local.config import get_lock_path\nfrom ray.autoscaler._private.local.config import get_state_path\nfrom ray.autoscaler._private.local.config import LOCAL_CLUSTER_NODE_TYPE\n </s> add  </s> remove     TAG_RAY_USER_NODE_TYPE,\n </s> add     NODE_KIND_WORKER,\n    STATUS_UP_TO_DATE,\n    TAG_RAY_NODE_KIND, </s> remove     TAG_RAY_USER_NODE_TYPE,\n </s> add     STATUS_UP_TO_DATE,\n    TAG_RAY_NODE_KIND, </s> remove     TAG_RAY_NODE_KIND,\n    NODE_KIND_WORKER,\n </s> add ", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/local/node_provider.py"}
{"docstring_tokens": "", "code_tokens": " <mask>     TAG_RAY_NODE_NAME,\n <mask>     TAG_RAY_NODE_STATUS,\n <mask>     STATUS_UP_TO_DATE,\n <mask> )\n <mask> from ray.autoscaler._private.local.config import bootstrap_local\n <mask> from ray.autoscaler._private.local.config import get_lock_path\n <mask> from ray.autoscaler._private.local.config import get_state_path\n <mask> from ray.autoscaler._private.local.config import LOCAL_CLUSTER_NODE_TYPE\n <mask> \n <mask> logger = logging.getLogger(__name__)\n <mask> \n <mask> filelock_logger = logging.getLogger(\"filelock\")\n <mask> filelock_logger.setLevel(logging.WARNING)\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove     STATUS_UP_TO_DATE,\n </s> add     TAG_RAY_USER_NODE_TYPE, </s> remove     TAG_RAY_USER_NODE_TYPE,\n </s> add     NODE_KIND_WORKER,\n    STATUS_UP_TO_DATE,\n    TAG_RAY_NODE_KIND, </s> remove     STATUS_UP_TO_DATE,\n </s> add     TAG_RAY_USER_NODE_TYPE, </s> remove     TAG_RAY_USER_NODE_TYPE,\n </s> add     STATUS_UP_TO_DATE,\n    TAG_RAY_NODE_KIND,", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/local/node_provider.py"}
{"docstring_tokens": "import json", "code_tokens": " <mask> \"\"\"Autoscaler monitoring loop daemon.\"\"\"\n <mask> \n <mask> import argparse\n <mask> from dataclasses import asdict\n <mask> import logging.handlers\n <mask> import os\n <mask> import sys\n <mask> import signal\n <mask> import time\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove import sys\n </s> add  </s> remove import json\n </s> add from dataclasses import asdict </s> remove from typing import Any, Callable, Dict, Union\n </s> add  </s> remove from threading import RLock\n </s> add ", "label_window": ["keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "", "code_tokens": " <mask> import argparse\n <mask> from dataclasses import asdict\n <mask> import logging.handlers\n <mask> import os\n <mask> import sys\n <mask> import signal\n <mask> import time\n <mask> from typing import Any, Callable, Dict, Union\n <mask> import traceback\n <mask> import json\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove from dataclasses import asdict\n </s> add import json </s> remove import json\n </s> add from dataclasses import asdict </s> remove from typing import Any, Callable, Dict, Union\n </s> add  </s> remove from typing import Optional\n\ntry:\n    import prometheus_client\nexcept ImportError:\n    prometheus_client = None\n </s> add from typing import Any, Callable, Dict, Optional, Union", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "import sys", "code_tokens": " <mask> import json\n <mask> import logging.handlers\n <mask> import os\n <mask> import signal\n <mask> import time\n <mask> import traceback\n <mask> from dataclasses import asdict\n <mask> from multiprocessing.synchronize import Event\n <mask> from typing import Any, Callable, Dict, Optional, Union\n <mask> \n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove import json\n </s> add from dataclasses import asdict </s> remove import sys\n </s> add  </s> remove from typing import Any, Callable, Dict, Union\n </s> add  </s> remove from typing import Optional\n\ntry:\n    import prometheus_client\nexcept ImportError:\n    prometheus_client = None\n </s> add from typing import Any, Callable, Dict, Optional, Union </s> remove from dataclasses import asdict\n </s> add import json", "label_window": ["keep", "keep", "keep", "add", "keep", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "", "code_tokens": " <mask> import os\n <mask> import sys\n <mask> import signal\n <mask> import time\n <mask> from typing import Any, Callable, Dict, Union\n <mask> import traceback\n <mask> import json\n <mask> from multiprocessing.synchronize import Event\n <mask> from typing import Optional\n <mask> \n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove import json\n </s> add from dataclasses import asdict </s> remove import sys\n </s> add  </s> remove from typing import Optional\n\ntry:\n    import prometheus_client\nexcept ImportError:\n    prometheus_client = None\n </s> add from typing import Any, Callable, Dict, Optional, Union </s> remove from threading import RLock\n </s> add ", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "from dataclasses import asdict", "code_tokens": " <mask> import signal\n <mask> import time\n <mask> from typing import Any, Callable, Dict, Union\n <mask> import traceback\n <mask> import json\n <mask> from multiprocessing.synchronize import Event\n <mask> from typing import Optional\n <mask> \n <mask> try:\n <mask>     import prometheus_client\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove from typing import Any, Callable, Dict, Union\n </s> add  </s> remove from typing import Optional\n\ntry:\n    import prometheus_client\nexcept ImportError:\n    prometheus_client = None\n </s> add from typing import Any, Callable, Dict, Optional, Union </s> remove import sys\n </s> add ", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "from typing import Any, Callable, Dict, Optional, Union", "code_tokens": " <mask> from typing import Any, Callable, Dict, Union\n <mask> import traceback\n <mask> import json\n <mask> from multiprocessing.synchronize import Event\n <mask> from typing import Optional\n <mask> \n <mask> try:\n <mask>     import prometheus_client\n <mask> except ImportError:\n <mask>     prometheus_client = None\n <mask> \n <mask> import ray\n <mask> from ray.autoscaler._private.autoscaler import StandardAutoscaler\n <mask> from ray.autoscaler._private.commands import teardown_cluster\n <mask> from ray.autoscaler._private.constants import (\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove import json\n </s> add from dataclasses import asdict </s> remove from typing import Any, Callable, Dict, Union\n </s> add  </s> remove     AUTOSCALER_UPDATE_INTERVAL_S,\n </s> add     AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE,", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "import ray._private.utils\nimport ray.ray_constants as ray_constants\nfrom ray._private.gcs_pubsub import GcsPublisher\nfrom ray._private.gcs_utils import GcsClient\nfrom ray._private.ray_logging import setup_component_logger", "code_tokens": " <mask> from multiprocessing.synchronize import Event\n <mask> from typing import Any, Callable, Dict, Optional, Union\n <mask> \n <mask> import ray\n <mask> from ray.autoscaler._private.autoscaler import StandardAutoscaler\n <mask> from ray.autoscaler._private.commands import teardown_cluster\n <mask> from ray.autoscaler._private.constants import (\n <mask>     AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE,\n <mask>     AUTOSCALER_METRIC_PORT,\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove from typing import Optional\n\ntry:\n    import prometheus_client\nexcept ImportError:\n    prometheus_client = None\n </s> add from typing import Any, Callable, Dict, Optional, Union </s> remove     AUTOSCALER_UPDATE_INTERVAL_S,\n </s> add     AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE, </s> remove from typing import Any, Callable, Dict, Union\n </s> add  </s> remove import json\n </s> add from dataclasses import asdict", "label_window": ["keep", "keep", "keep", "add", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "    AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE,", "code_tokens": " <mask> import ray\n <mask> from ray.autoscaler._private.autoscaler import StandardAutoscaler\n <mask> from ray.autoscaler._private.commands import teardown_cluster\n <mask> from ray.autoscaler._private.constants import (\n <mask>     AUTOSCALER_UPDATE_INTERVAL_S,\n <mask>     AUTOSCALER_METRIC_PORT,\n <mask> )\n <mask> from ray.autoscaler._private.event_summarizer import EventSummarizer\n <mask> from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics\n <mask> from ray.autoscaler._private.load_metrics import LoadMetrics\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics\n </s> add  </s> remove from ray.autoscaler._private.constants import AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE\n </s> add from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics </s> remove from ray.autoscaler._private.local.node_provider import LocalNodeProvider\n </s> add ", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "    AUTOSCALER_UPDATE_INTERVAL_S,", "code_tokens": " <mask> from ray.autoscaler._private.constants import (\n <mask>     AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE,\n <mask>     AUTOSCALER_METRIC_PORT,\n <mask> )\n <mask> from ray.autoscaler._private.event_summarizer import EventSummarizer\n <mask> from ray.autoscaler._private.load_metrics import LoadMetrics\n <mask> from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove     AUTOSCALER_UPDATE_INTERVAL_S,\n </s> add     AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE, </s> remove from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics\n </s> add  </s> remove from ray.autoscaler._private.constants import AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE\n </s> add from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics </s> remove from ray.autoscaler._private.local.node_provider import LocalNodeProvider\n </s> add ", "label_window": ["keep", "keep", "add", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "", "code_tokens": " <mask>     AUTOSCALER_UPDATE_INTERVAL_S,\n <mask>     AUTOSCALER_METRIC_PORT,\n <mask> )\n <mask> from ray.autoscaler._private.event_summarizer import EventSummarizer\n <mask> from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics\n <mask> from ray.autoscaler._private.load_metrics import LoadMetrics\n <mask> from ray.autoscaler._private.constants import AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE\n <mask> from ray.autoscaler._private.util import format_readonly_node_type\n <mask> \n <mask> from ray.core.generated import gcs_service_pb2, gcs_service_pb2_grpc\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove from ray.autoscaler._private.constants import AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE\n </s> add from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics </s> remove \nfrom ray.core.generated import gcs_service_pb2, gcs_service_pb2_grpc\nfrom ray.core.generated import gcs_pb2\nimport ray.ray_constants as ray_constants\nfrom ray._private.ray_logging import setup_component_logger\nfrom ray._private.gcs_pubsub import GcsPublisher\nfrom ray._private.gcs_utils import GcsClient\n </s> add from ray.core.generated import gcs_pb2, gcs_service_pb2, gcs_service_pb2_grpc </s> remove     AUTOSCALER_UPDATE_INTERVAL_S,\n </s> add     AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE, </s> remove from ray.autoscaler._private.local.node_provider import LocalNodeProvider\n </s> add ", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics", "code_tokens": " <mask> )\n <mask> from ray.autoscaler._private.event_summarizer import EventSummarizer\n <mask> from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics\n <mask> from ray.autoscaler._private.load_metrics import LoadMetrics\n <mask> from ray.autoscaler._private.constants import AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE\n <mask> from ray.autoscaler._private.util import format_readonly_node_type\n <mask> \n <mask> from ray.core.generated import gcs_service_pb2, gcs_service_pb2_grpc\n <mask> from ray.core.generated import gcs_pb2\n <mask> import ray.ray_constants as ray_constants\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics\n </s> add  </s> remove \nfrom ray.core.generated import gcs_service_pb2, gcs_service_pb2_grpc\nfrom ray.core.generated import gcs_pb2\nimport ray.ray_constants as ray_constants\nfrom ray._private.ray_logging import setup_component_logger\nfrom ray._private.gcs_pubsub import GcsPublisher\nfrom ray._private.gcs_utils import GcsClient\n </s> add from ray.core.generated import gcs_pb2, gcs_service_pb2, gcs_service_pb2_grpc </s> remove     AUTOSCALER_UPDATE_INTERVAL_S,\n </s> add     AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE, </s> remove from ray.autoscaler._private.local.node_provider import LocalNodeProvider\n </s> add ", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "from ray.core.generated import gcs_pb2, gcs_service_pb2, gcs_service_pb2_grpc", "code_tokens": " <mask> from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics\n <mask> from ray.autoscaler._private.load_metrics import LoadMetrics\n <mask> from ray.autoscaler._private.constants import AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE\n <mask> from ray.autoscaler._private.util import format_readonly_node_type\n <mask> \n <mask> from ray.core.generated import gcs_service_pb2, gcs_service_pb2_grpc\n <mask> from ray.core.generated import gcs_pb2\n <mask> import ray.ray_constants as ray_constants\n <mask> from ray._private.ray_logging import setup_component_logger\n <mask> from ray._private.gcs_pubsub import GcsPublisher\n <mask> from ray._private.gcs_utils import GcsClient\n <mask> from ray.experimental.internal_kv import (\n <mask>     _initialize_internal_kv,\n <mask>     _internal_kv_put,\n <mask>     _internal_kv_initialized,\n <mask>     _internal_kv_get,\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove from ray.autoscaler._private.constants import AUTOSCALER_MAX_RESOURCE_DEMAND_VECTOR_SIZE\n </s> add from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics </s> remove from ray.autoscaler._private.prom_metrics import AutoscalerPrometheusMetrics\n </s> add  </s> remove     _internal_kv_put,\n    _internal_kv_initialized,\n    _internal_kv_get,\n </s> add ", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "", "code_tokens": " <mask> from ray._private.gcs_pubsub import GcsPublisher\n <mask> from ray._private.gcs_utils import GcsClient\n <mask> from ray.experimental.internal_kv import (\n <mask>     _initialize_internal_kv,\n <mask>     _internal_kv_put,\n <mask>     _internal_kv_initialized,\n <mask>     _internal_kv_get,\n <mask>     _internal_kv_del,\n <mask> )\n <mask> import ray._private.utils\n <mask> \n <mask> logger = logging.getLogger(__name__)\n </s> Add import sorting to format.sh (#25678)\n\nIt will be easier to develop if we could use a tool to organize / sort imports and not have to move them around by hand.\r\n\r\nThis PR shows how we could do this with isort (black doesn't quite do this per https://github.com/psf/black/issues/333)\r\n\r\nAfter this PR lands everyone will need to update their formatter to include isort if they don't have it already, i.e.\r\n\r\n   pip install -r ./python/requirements_linters.txt \r\n\r\nAll future file changes will go through isort and may introduce a slightly larger PR the first time as it will clean up the imports. \r\n\r\nThe plan is to land this PR and also clean up the rest of the code in parallel by using this PR to format the codebase (so people won't get surprised by the formatter if the file hasn't been touched yet)\r\n\r\nCo-authored-by: Clarence Ng <clarence@anyscale.com> </s> remove \nfrom ray.core.generated import gcs_service_pb2, gcs_service_pb2_grpc\nfrom ray.core.generated import gcs_pb2\nimport ray.ray_constants as ray_constants\nfrom ray._private.ray_logging import setup_component_logger\nfrom ray._private.gcs_pubsub import GcsPublisher\nfrom ray._private.gcs_utils import GcsClient\n </s> add from ray.core.generated import gcs_pb2, gcs_service_pb2, gcs_service_pb2_grpc </s> remove from ray._private.gcs_utils import PlacementGroupTableData\n </s> add ", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/73e113152bcb97c6dec93bc1c2a1d9a98e492a0f", "file_name": "python/ray/autoscaler/_private/monitor.py"}
{"docstring_tokens": "    mat = pd.DataFrame(test_data.frame).as_matrix(['A', 'B'])", "code_tokens": " <mask>     mat = df.as_matrix()\n <mask>     assert mat[0, 0] == 1j\n <mask> \n <mask>     # single block corner case\n <mask>     mat = rdf.DataFrame(test_data.frame).as_matrix(['A', 'B'])\n <mask>     expected = test_data.frame.reindex(columns=['A', 'B']).values\n <mask>     tm.assert_almost_equal(mat, expected)\n <mask> \n <mask> \n <mask> def test_asfreq():\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df[-2:].reindex(index), num_partitions).fillna(\n        method='backfill', limit=5\n    )\n </s> add     ray_df = pd.DataFrame(df[-2:].reindex(index)).fillna(method='backfill',\n                                                         limit=5) </s> remove     ray_df = from_pandas(df[:2].reindex(index), num_partitions).fillna(\n        method='pad', limit=5\n    )\n </s> add     ray_df = pd.DataFrame(df[:2].reindex(index)).fillna(method='pad', limit=5) </s> remove def test_frame_fillna_limit(num_partitions=2):\n </s> add def test_frame_fillna_limit(): </s> remove     single_bool_pd_df = pd.DataFrame([True])\n    single_bool_ray_df = from_pandas(single_bool_pd_df, 1)\n </s> add     single_bool_pd_df = pandas.DataFrame([True])\n    single_bool_ray_df = pd.DataFrame([True]) </s> remove     # GH 5628\n    df = pd.DataFrame(np.random.randn(10, 3), columns=list('abc'))\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = np.random.randn(10, 3)\n    df = pandas.DataFrame(frame_data, columns=list('abc'))\n    ray_df = pd.DataFrame(frame_data, columns=list('abc'))", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(td.frame)\n    our_df_casted = ray_df.astype(np.int32)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.int32),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns)", "code_tokens": " <mask> \n <mask> \n <mask> def test_astype():\n <mask>     td = TestData()\n <mask>     ray_df_frame = from_pandas(td.frame, 2)\n <mask>     our_df_casted = ray_df_frame.astype(np.int32)\n <mask>     expected_df_casted = pd.DataFrame(td.frame.values.astype(np.int32),\n <mask>                                       index=td.frame.index,\n <mask>                                       columns=td.frame.columns)\n <mask> \n <mask>     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n <mask> \n <mask>     our_df_casted = ray_df_frame.astype(np.float64)\n <mask>     expected_df_casted = pd.DataFrame(td.frame.values.astype(np.float64),\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     our_df_casted = ray_df_frame.astype(np.float64)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(np.float64),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     our_df_casted = ray_df.astype(np.float64)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.float64),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     our_df_casted = ray_df_frame.astype(str)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(str),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     our_df_casted = ray_df.astype(str)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(str),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(our_df_casted, expected_df_casted)", "code_tokens": " <mask>     expected_df_casted = pd.DataFrame(td.frame.values.astype(np.int32),\n <mask>                                       index=td.frame.index,\n <mask>                                       columns=td.frame.columns)\n <mask> \n <mask>     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n <mask> \n <mask>     our_df_casted = ray_df_frame.astype(np.float64)\n <mask>     expected_df_casted = pd.DataFrame(td.frame.values.astype(np.float64),\n <mask>                                       index=td.frame.index,\n <mask>                                       columns=td.frame.columns)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     our_df_casted = ray_df_frame.astype(np.float64)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(np.float64),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     our_df_casted = ray_df.astype(np.float64)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.float64),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     ray_df_frame = from_pandas(td.frame, 2)\n    our_df_casted = ray_df_frame.astype(np.int32)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(np.int32),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     ray_df = pd.DataFrame(td.frame)\n    our_df_casted = ray_df.astype(np.int32)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.int32),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     our_df_casted = ray_df_frame.astype(str)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(str),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     our_df_casted = ray_df.astype(str)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(str),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    our_df_casted = ray_df.astype(np.float64)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.float64),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns)", "code_tokens": " <mask>                                       columns=td.frame.columns)\n <mask> \n <mask>     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n <mask> \n <mask>     our_df_casted = ray_df_frame.astype(np.float64)\n <mask>     expected_df_casted = pd.DataFrame(td.frame.values.astype(np.float64),\n <mask>                                       index=td.frame.index,\n <mask>                                       columns=td.frame.columns)\n <mask> \n <mask>     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n <mask> \n <mask>     our_df_casted = ray_df_frame.astype(str)\n <mask>     expected_df_casted = pd.DataFrame(td.frame.values.astype(str),\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     our_df_casted = ray_df_frame.astype(str)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(str),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     our_df_casted = ray_df.astype(str)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(str),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     ray_df_frame = from_pandas(td.frame, 2)\n    our_df_casted = ray_df_frame.astype(np.int32)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(np.int32),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     ray_df = pd.DataFrame(td.frame)\n    our_df_casted = ray_df.astype(np.int32)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.int32),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(our_df_casted, expected_df_casted)", "code_tokens": " <mask>     expected_df_casted = pd.DataFrame(td.frame.values.astype(np.float64),\n <mask>                                       index=td.frame.index,\n <mask>                                       columns=td.frame.columns)\n <mask> \n <mask>     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n <mask> \n <mask>     our_df_casted = ray_df_frame.astype(str)\n <mask>     expected_df_casted = pd.DataFrame(td.frame.values.astype(str),\n <mask>                                       index=td.frame.index,\n <mask>                                       columns=td.frame.columns)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     our_df_casted = ray_df_frame.astype(np.float64)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(np.float64),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     our_df_casted = ray_df.astype(np.float64)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.float64),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     our_df_casted = ray_df_frame.astype(str)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(str),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     our_df_casted = ray_df.astype(str)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(str),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     ray_df_frame = from_pandas(td.frame, 2)\n    our_df_casted = ray_df_frame.astype(np.int32)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(np.int32),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     ray_df = pd.DataFrame(td.frame)\n    our_df_casted = ray_df.astype(np.int32)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.int32),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    our_df_casted = ray_df.astype(str)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(str),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns)", "code_tokens": " <mask>                                       columns=td.frame.columns)\n <mask> \n <mask>     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n <mask> \n <mask>     our_df_casted = ray_df_frame.astype(str)\n <mask>     expected_df_casted = pd.DataFrame(td.frame.values.astype(str),\n <mask>                                       index=td.frame.index,\n <mask>                                       columns=td.frame.columns)\n <mask> \n <mask>     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n <mask> \n <mask> \n <mask> def test_at_time():\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     our_df_casted = ray_df_frame.astype(np.float64)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(np.float64),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     our_df_casted = ray_df.astype(np.float64)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.float64),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     ray_df_frame = from_pandas(td.frame, 2)\n    our_df_casted = ray_df_frame.astype(np.int32)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(np.int32),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     ray_df = pd.DataFrame(td.frame)\n    our_df_casted = ray_df.astype(np.int32)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.int32),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(our_df_casted, expected_df_casted)", "code_tokens": " <mask>     expected_df_casted = pd.DataFrame(td.frame.values.astype(str),\n <mask>                                       index=td.frame.index,\n <mask>                                       columns=td.frame.columns)\n <mask> \n <mask>     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n <mask> \n <mask> \n <mask> def test_at_time():\n <mask>     ray_df = create_test_dataframe()\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     our_df_casted = ray_df_frame.astype(str)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(str),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     our_df_casted = ray_df.astype(str)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(str),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     our_df_casted = ray_df_frame.astype(np.float64)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(np.float64),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     our_df_casted = ray_df.astype(np.float64)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.float64),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     assert(ray_df_equals_pandas(our_df_casted, expected_df_casted))\n </s> add     assert ray_df_equals_pandas(our_df_casted, expected_df_casted) </s> remove     ray_df_frame = from_pandas(td.frame, 2)\n    our_df_casted = ray_df_frame.astype(np.int32)\n    expected_df_casted = pd.DataFrame(td.frame.values.astype(np.int32),\n                                      index=td.frame.index,\n                                      columns=td.frame.columns)\n </s> add     ray_df = pd.DataFrame(td.frame)\n    our_df_casted = ray_df.astype(np.int32)\n    expected_df_casted = pandas.DataFrame(td.frame.values.astype(np.int32),\n                                          index=td.frame.index,\n                                          columns=td.frame.columns)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "def test_bfill():", "code_tokens": " <mask>         ray_df.between_time(None, None)\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_bfill(num_partitions=2):\n <mask>     test_data = TestData()\n <mask>     test_data.tsframe['A'][:5] = np.nan\n <mask>     test_data.tsframe['A'][-5:] = np.nan\n <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions)\n <mask>     assert ray_df_equals_pandas(\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.bfill(),\n        test_data.tsframe.bfill()\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.bfill(), test_data.tsframe.bfill()) </s> remove def test_bfill2(num_partitions=2):\n </s> add def test_bfill2(): </s> remove def test_ffill2(num_partitions=2):\n </s> add def test_ffill2(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill'),\n        test_data.tsframe.fillna(method='ffill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='ffill'),\n                                test_data.tsframe.fillna(method='ffill')) </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.bfill(), test_data.tsframe.bfill())", "code_tokens": " <mask> def test_bfill(num_partitions=2):\n <mask>     test_data = TestData()\n <mask>     test_data.tsframe['A'][:5] = np.nan\n <mask>     test_data.tsframe['A'][-5:] = np.nan\n <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions)\n <mask>     assert ray_df_equals_pandas(\n <mask>         ray_df.bfill(),\n <mask>         test_data.tsframe.bfill()\n <mask>     )\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_bool(ray_df, pd_df):\n <mask>     with pytest.raises(ValueError):\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove def test_bfill(num_partitions=2):\n </s> add def test_bfill(): </s> remove def test_bfill2(num_partitions=2):\n </s> add def test_bfill2(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill'),\n        test_data.tsframe.fillna(method='ffill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='ffill'),\n                                test_data.tsframe.fillna(method='ffill')) </s> remove def test_ffill2(num_partitions=2):\n </s> add def test_ffill2(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    single_bool_pd_df = pandas.DataFrame([True])\n    single_bool_ray_df = pd.DataFrame([True])", "code_tokens": " <mask>     with pytest.raises(ValueError):\n <mask>         ray_df.bool()\n <mask>         pd_df.bool()\n <mask> \n <mask>     single_bool_pd_df = pd.DataFrame([True])\n <mask>     single_bool_ray_df = from_pandas(single_bool_pd_df, 1)\n <mask> \n <mask>     assert single_bool_pd_df.bool() == single_bool_ray_df.bool()\n <mask> \n <mask> \n <mask> def test_boxplot():\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.bfill(),\n        test_data.tsframe.bfill()\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.bfill(), test_data.tsframe.bfill()) </s> remove     res1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    res2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(['a'], axis=0)\n    ray_df2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(ray_df1, ray_df2)\n\n    ray_df1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    ray_df2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop(labels='e', axis=1)\n    res2 = ray_df.drop(columns='e')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('d', 1)\n    ray_df2 = ray_df.drop(columns='d')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     mat = rdf.DataFrame(test_data.frame).as_matrix(['A', 'B'])\n </s> add     mat = pd.DataFrame(test_data.frame).as_matrix(['A', 'B']) </s> remove     res1 = ray_df.drop('d', 1)\n    res2 = ray_df.drop(columns='d')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('a')\n    ray_df2 = ray_df.drop(index='a')\n    assert ray_df_equals(ray_df1, ray_df2)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax())", "code_tokens": " <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_cummax(ray_df, pandas_df):\n <mask>     assert(ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax()))\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_cummin(ray_df, pandas_df):\n <mask>     assert(ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()))\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     assert(ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()))\n </s> add     assert ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()) </s> remove     assert(ray_df.describe().equals(pandas_df.describe()))\n </s> add     assert ray_df.describe().equals(pandas_df.describe()) </s> remove     assert(ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()))\n </s> add     assert ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()) </s> remove     assert(ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()))\n </s> add     assert ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()) </s> remove     assert(ray_df_equals_pandas(ray_df.diff(), pandas_df.diff()))\n    assert(ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1)))\n    assert(ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1)))\n </s> add     assert ray_df_equals_pandas(ray_df.diff(), pandas_df.diff())\n    assert ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1))\n    assert ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1))", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin())", "code_tokens": " <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_cummin(ray_df, pandas_df):\n <mask>     assert(ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()))\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_cumprod(ray_df, pandas_df):\n <mask>     assert(ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()))\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     assert(ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()))\n </s> add     assert ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()) </s> remove     assert(ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax()))\n </s> add     assert ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax()) </s> remove     assert(ray_df.describe().equals(pandas_df.describe()))\n </s> add     assert ray_df.describe().equals(pandas_df.describe()) </s> remove     assert(ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()))\n </s> add     assert ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()) </s> remove     assert(ray_df_equals_pandas(ray_df.diff(), pandas_df.diff()))\n    assert(ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1)))\n    assert(ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1)))\n </s> add     assert ray_df_equals_pandas(ray_df.diff(), pandas_df.diff())\n    assert ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1))\n    assert ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1))", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod())", "code_tokens": " <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_cumprod(ray_df, pandas_df):\n <mask>     assert(ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()))\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_cumsum(ray_df, pandas_df):\n <mask>     assert(ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()))\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     assert(ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()))\n </s> add     assert ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()) </s> remove     assert(ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()))\n </s> add     assert ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()) </s> remove     assert(ray_df.describe().equals(pandas_df.describe()))\n </s> add     assert ray_df.describe().equals(pandas_df.describe()) </s> remove     assert(ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax()))\n </s> add     assert ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax()) </s> remove     assert(ray_df_equals_pandas(ray_df.diff(), pandas_df.diff()))\n    assert(ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1)))\n    assert(ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1)))\n </s> add     assert ray_df_equals_pandas(ray_df.diff(), pandas_df.diff())\n    assert ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1))\n    assert ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1))", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum())", "code_tokens": " <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_cumsum(ray_df, pandas_df):\n <mask>     assert(ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()))\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_describe(ray_df, pandas_df):\n <mask>     assert(ray_df.describe().equals(pandas_df.describe()))\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     assert(ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()))\n </s> add     assert ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()) </s> remove     assert(ray_df.describe().equals(pandas_df.describe()))\n </s> add     assert ray_df.describe().equals(pandas_df.describe()) </s> remove     assert(ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()))\n </s> add     assert ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()) </s> remove     assert(ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax()))\n </s> add     assert ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax()) </s> remove     assert(ray_df_equals_pandas(ray_df.diff(), pandas_df.diff()))\n    assert(ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1)))\n    assert(ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1)))\n </s> add     assert ray_df_equals_pandas(ray_df.diff(), pandas_df.diff())\n    assert ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1))\n    assert ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1))", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df.describe().equals(pandas_df.describe())", "code_tokens": " <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_describe(ray_df, pandas_df):\n <mask>     assert(ray_df.describe().equals(pandas_df.describe()))\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_diff(ray_df, pandas_df):\n <mask>     assert(ray_df_equals_pandas(ray_df.diff(), pandas_df.diff()))\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     assert(ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()))\n </s> add     assert ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()) </s> remove     assert(ray_df_equals_pandas(ray_df.diff(), pandas_df.diff()))\n    assert(ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1)))\n    assert(ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1)))\n </s> add     assert ray_df_equals_pandas(ray_df.diff(), pandas_df.diff())\n    assert ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1))\n    assert ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1)) </s> remove     assert(ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()))\n </s> add     assert ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()) </s> remove     assert(ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()))\n </s> add     assert ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()) </s> remove     assert(ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax()))\n </s> add     assert ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax())", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(ray_df.diff(), pandas_df.diff())\n    assert ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1))\n    assert ray_df_equals_pandas(ray_df.diff(periods=1),\n                                pandas_df.diff(periods=1))", "code_tokens": " <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_diff(ray_df, pandas_df):\n <mask>     assert(ray_df_equals_pandas(ray_df.diff(), pandas_df.diff()))\n <mask>     assert(ray_df_equals_pandas(ray_df.diff(axis=1), pandas_df.diff(axis=1)))\n <mask>     assert(ray_df_equals_pandas(ray_df.diff(periods=1),\n <mask>                                 pandas_df.diff(periods=1)))\n <mask> \n <mask> \n <mask> def test_div():\n <mask>     test_inter_df_math(\"div\", simple=False)\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     assert(ray_df.describe().equals(pandas_df.describe()))\n </s> add     assert ray_df.describe().equals(pandas_df.describe()) </s> remove     assert(ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()))\n </s> add     assert ray_df_equals_pandas(ray_df.cumsum(), pandas_df.cumsum()) </s> remove     assert(ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax()))\n </s> add     assert ray_df_equals_pandas(ray_df.cummax(), pandas_df.cummax()) </s> remove     assert(ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()))\n </s> add     assert ray_df_equals_pandas(ray_df.cumprod(), pandas_df.cumprod()) </s> remove     assert(ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin()))\n </s> add     assert ray_df_equals_pandas(ray_df.cummin(), pandas_df.cummin())", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = {\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]}\n    simple = pandas.DataFrame(frame_data)\n    ray_simple = pd.DataFrame(frame_data)", "code_tokens": " <mask>         ray_df.dot(None)\n <mask> \n <mask> \n <mask> def test_drop():\n <mask>     ray_df = create_test_dataframe()\n <mask>     simple = pd.DataFrame({\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]})\n <mask>     ray_simple = from_pandas(simple, 2)\n <mask>     assert ray_df_equals_pandas(ray_simple.drop(\"A\", axis=1), simple[['B']])\n <mask>     assert ray_df_equals_pandas(ray_simple.drop([\"A\", \"B\"], axis='columns'),\n <mask>                                 simple[[]])\n <mask>     assert ray_df_equals_pandas(ray_simple.drop([0, 1, 3], axis=0),\n <mask>                                 simple.loc[[2], :])\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove def test_fillna_dict_series(num_partitions=2):\n    df = pd.DataFrame({'a': [np.nan, 1, 2, np.nan, np.nan],\n                       'b': [1, 2, 3, np.nan, np.nan],\n                       'c': [np.nan, 1, 2, 3, 4]})\n    ray_df = from_pandas(df, num_partitions)\n </s> add def test_fillna_dict_series():\n    frame_data = {'a': [np.nan, 1, 2, np.nan, np.nan],\n                  'b': [1, 2, 3, np.nan, np.nan],\n                  'c': [np.nan, 1, 2, 3, 4]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove def test_fillna_dataframe(num_partitions=2):\n    # GH 8377\n    df = pd.DataFrame({'a': [np.nan, 1, 2, np.nan, np.nan],\n                       'b': [1, 2, 3, np.nan, np.nan],\n                       'c': [np.nan, 1, 2, 3, 4]},\n                      index=list('VWXYZ'))\n    ray_df = from_pandas(df, num_partitions)\n </s> add def test_fillna_dataframe():\n    frame_data = {'a': [np.nan, 1, 2, np.nan, np.nan],\n                  'b': [1, 2, 3, np.nan, np.nan],\n                  'c': [np.nan, 1, 2, 3, 4]}\n    df = pandas.DataFrame(frame_data, index=list('VWXYZ'))\n    ray_df = pd.DataFrame(frame_data, index=list('VWXYZ')) </s> remove     assert ray_df_equals_pandas(\n        ray_df.fillna({'a': 0, 'b': 5}),\n        df.fillna({'a': 0, 'b': 5})\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.fillna({'a': 0, 'b': 5}),\n                                df.fillna({'a': 0, 'b': 5})) </s> remove     # it works!\n    assert ray_df_equals_pandas(\n        ray_df.fillna(np.nan),\n        df.fillna(np.nan)\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.fillna(np.nan), df.fillna(np.nan)) </s> remove     pandas_df1 = pd.DataFrame({'col1': [2.9, 3, 3, 3],\n                               'col2': [2, 3, 4, 1]})\n    ray_df1 = from_pandas(pandas_df1, 2)\n    ray_df2 = from_pandas(pandas_df1, 3)\n </s> add     frame_data = {'col1': [2.9, 3, 3, 3], 'col2': [2, 3, 4, 1]}\n    ray_df1 = pd.DataFrame(frame_data)\n    ray_df2 = pd.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    # non-unique\n    nu_df = pandas.DataFrame(pandas.compat.lzip(range(3), range(-3, 1),\n                                                list('abc')),\n                             columns=['a', 'a', 'b'])\n    ray_nu_df = pd.DataFrame(nu_df)", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_simple.drop(['A', 'C'], axis=1,\n <mask>                                 errors='ignore'),\n <mask>                                 simple[['B']])\n <mask> \n <mask>     # non-unique - wheee!\n <mask>     nu_df = pd.DataFrame(pd.compat.lzip(range(3), range(-3, 1), list('abc')),\n <mask>                          columns=['a', 'a', 'b'])\n <mask>     ray_nu_df = from_pandas(nu_df, 3)\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop('a', axis=1), nu_df[['b']])\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop('b', axis='columns'),\n <mask>                                 nu_df['a'])\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df)  # GH 16398\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df)  # GH 16398\n </s> add     assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df) </s> remove     nu_df = nu_df.set_index(pd.Index(['X', 'Y', 'X']))\n </s> add     nu_df = nu_df.set_index(pandas.Index(['X', 'Y', 'X'])) </s> remove     ray_nu_df = from_pandas(nu_df, 3)\n </s> add     ray_nu_df = pd.DataFrame(nu_df) </s> remove     ray_df = create_test_dataframe()\n    simple = pd.DataFrame({\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]})\n    ray_simple = from_pandas(simple, 2)\n </s> add     frame_data = {\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]}\n    simple = pandas.DataFrame(frame_data)\n    ray_simple = pd.DataFrame(frame_data) </s> remove     assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill', axis=1),\n        df.fillna(method='ffill', axis=1)\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.fillna(method='ffill', axis=1),\n                                df.fillna(method='ffill', axis=1))", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df)", "code_tokens": " <mask>     ray_nu_df = from_pandas(nu_df, 3)\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop('a', axis=1), nu_df[['b']])\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop('b', axis='columns'),\n <mask>                                 nu_df['a'])\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df)  # GH 16398\n <mask> \n <mask>     nu_df = nu_df.set_index(pd.Index(['X', 'Y', 'X']))\n <mask>     nu_df.columns = list('abc')\n <mask>     ray_nu_df = from_pandas(nu_df, 3)\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop('X', axis='rows'),\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     nu_df = nu_df.set_index(pd.Index(['X', 'Y', 'X']))\n </s> add     nu_df = nu_df.set_index(pandas.Index(['X', 'Y', 'X'])) </s> remove     ray_nu_df = from_pandas(nu_df, 3)\n </s> add     ray_nu_df = pd.DataFrame(nu_df) </s> remove     # non-unique - wheee!\n    nu_df = pd.DataFrame(pd.compat.lzip(range(3), range(-3, 1), list('abc')),\n                         columns=['a', 'a', 'b'])\n    ray_nu_df = from_pandas(nu_df, 3)\n </s> add     # non-unique\n    nu_df = pandas.DataFrame(pandas.compat.lzip(range(3), range(-3, 1),\n                                                list('abc')),\n                             columns=['a', 'a', 'b'])\n    ray_nu_df = pd.DataFrame(nu_df) </s> remove     # GH 5628\n    df = pd.DataFrame(np.random.randn(10, 3), columns=list('abc'))\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = np.random.randn(10, 3)\n    df = pandas.DataFrame(frame_data, columns=list('abc'))\n    ray_df = pd.DataFrame(frame_data, columns=list('abc')) </s> remove     assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill', axis=1),\n        df.fillna(method='ffill', axis=1)\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.fillna(method='ffill', axis=1),\n                                df.fillna(method='ffill', axis=1))", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    nu_df = nu_df.set_index(pandas.Index(['X', 'Y', 'X']))", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_nu_df.drop('b', axis='columns'),\n <mask>                                 nu_df['a'])\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df)  # GH 16398\n <mask> \n <mask>     nu_df = nu_df.set_index(pd.Index(['X', 'Y', 'X']))\n <mask>     nu_df.columns = list('abc')\n <mask>     ray_nu_df = from_pandas(nu_df, 3)\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop('X', axis='rows'),\n <mask>                                 nu_df.loc[[\"Y\"], :])\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop(['X', 'Y'], axis=0),\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_nu_df = from_pandas(nu_df, 3)\n </s> add     ray_nu_df = pd.DataFrame(nu_df) </s> remove     assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df)  # GH 16398\n </s> add     assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df) </s> remove     # non-unique - wheee!\n    nu_df = pd.DataFrame(pd.compat.lzip(range(3), range(-3, 1), list('abc')),\n                         columns=['a', 'a', 'b'])\n    ray_nu_df = from_pandas(nu_df, 3)\n </s> add     # non-unique\n    nu_df = pandas.DataFrame(pandas.compat.lzip(range(3), range(-3, 1),\n                                                list('abc')),\n                             columns=['a', 'a', 'b'])\n    ray_nu_df = pd.DataFrame(nu_df) </s> remove     # GH 5628\n    df = pd.DataFrame(np.random.randn(10, 3), columns=list('abc'))\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = np.random.randn(10, 3)\n    df = pandas.DataFrame(frame_data, columns=list('abc'))\n    ray_df = pd.DataFrame(frame_data, columns=list('abc')) </s> remove     ray_df = create_test_dataframe()\n    simple = pd.DataFrame({\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]})\n    ray_simple = from_pandas(simple, 2)\n </s> add     frame_data = {\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]}\n    simple = pandas.DataFrame(frame_data)\n    ray_simple = pd.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_nu_df = pd.DataFrame(nu_df)", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df)  # GH 16398\n <mask> \n <mask>     nu_df = nu_df.set_index(pd.Index(['X', 'Y', 'X']))\n <mask>     nu_df.columns = list('abc')\n <mask>     ray_nu_df = from_pandas(nu_df, 3)\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop('X', axis='rows'),\n <mask>                                 nu_df.loc[[\"Y\"], :])\n <mask>     assert ray_df_equals_pandas(ray_nu_df.drop(['X', 'Y'], axis=0),\n <mask>                                 nu_df.loc[[], :])\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     nu_df = nu_df.set_index(pd.Index(['X', 'Y', 'X']))\n </s> add     nu_df = nu_df.set_index(pandas.Index(['X', 'Y', 'X'])) </s> remove     assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df)  # GH 16398\n </s> add     assert ray_df_equals_pandas(ray_nu_df.drop([]), nu_df) </s> remove     # non-unique - wheee!\n    nu_df = pd.DataFrame(pd.compat.lzip(range(3), range(-3, 1), list('abc')),\n                         columns=['a', 'a', 'b'])\n    ray_nu_df = from_pandas(nu_df, 3)\n </s> add     # non-unique\n    nu_df = pandas.DataFrame(pandas.compat.lzip(range(3), range(-3, 1),\n                                                list('abc')),\n                             columns=['a', 'a', 'b'])\n    ray_nu_df = pd.DataFrame(nu_df) </s> remove     # GH 5628\n    df = pd.DataFrame(np.random.randn(10, 3), columns=list('abc'))\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = np.random.randn(10, 3)\n    df = pandas.DataFrame(frame_data, columns=list('abc'))\n    ray_df = pd.DataFrame(frame_data, columns=list('abc')) </s> remove     ray_df = create_test_dataframe()\n    simple = pd.DataFrame({\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]})\n    ray_simple = from_pandas(simple, 2)\n </s> add     frame_data = {\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]}\n    simple = pandas.DataFrame(frame_data)\n    ray_simple = pd.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = np.random.randn(10, 3)\n    df = pandas.DataFrame(frame_data, columns=list('abc'))\n    ray_df = pd.DataFrame(frame_data, columns=list('abc'))", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_nu_df.drop(['X', 'Y'], axis=0),\n <mask>                                 nu_df.loc[[], :])\n <mask> \n <mask>     # inplace cache issue\n <mask>     # GH 5628\n <mask>     df = pd.DataFrame(np.random.randn(10, 3), columns=list('abc'))\n <mask>     ray_df = from_pandas(df, 2)\n <mask>     expected = df[~(df.b > 0)]\n <mask>     ray_df.drop(labels=df[df.b > 0].index, inplace=True)\n <mask>     assert ray_df_equals_pandas(ray_df, expected)\n <mask> \n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_nu_df = from_pandas(nu_df, 3)\n </s> add     ray_nu_df = pd.DataFrame(nu_df) </s> remove     nu_df = nu_df.set_index(pd.Index(['X', 'Y', 'X']))\n </s> add     nu_df = nu_df.set_index(pandas.Index(['X', 'Y', 'X'])) </s> remove     ray_df = from_pandas(df[-2:].reindex(index), num_partitions).fillna(\n        method='backfill', limit=5\n    )\n </s> add     ray_df = pd.DataFrame(df[-2:].reindex(index)).fillna(method='backfill',\n                                                         limit=5) </s> remove     ray_df = from_pandas(df[:2].reindex(index), num_partitions).fillna(\n        method='pad', limit=5\n    )\n </s> add     ray_df = pd.DataFrame(df[:2].reindex(index)).fillna(method='pad', limit=5) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    # equivalence of the labels/axis and index/columns API's\n    frame_data = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_df, expected)\n <mask> \n <mask> \n <mask> def test_drop_api_equivalence():\n <mask>     # equivalence of the labels/axis and index/columns API's (GH12392)\n <mask>     df = pd.DataFrame([[1, 2, 3], [3, 4, 5], [5, 6, 7]],\n <mask>                       index=['a', 'b', 'c'],\n <mask>                       columns=['d', 'e', 'f'])\n <mask>     ray_df = from_pandas(df, 3)\n <mask> \n <mask>     res1 = ray_df.drop('a')\n <mask>     res2 = ray_df.drop(index='a')\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     res1 = ray_df.drop('a')\n    res2 = ray_df.drop(index='a')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df = pd.DataFrame(frame_data, index=['a', 'b', 'c'],\n                          columns=['d', 'e', 'f']) </s> remove     res1 = ray_df.drop('d', 1)\n    res2 = ray_df.drop(columns='d')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('a')\n    ray_df2 = ray_df.drop(index='a')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop(labels='e', axis=1)\n    res2 = ray_df.drop(columns='e')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('d', 1)\n    ray_df2 = ray_df.drop(columns='d')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop(['a'], axis=0)\n    res2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(labels='e', axis=1)\n    ray_df2 = ray_df.drop(columns='e')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    res2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(['a'], axis=0)\n    ray_df2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(ray_df1, ray_df2)\n\n    ray_df1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    ray_df2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(ray_df1, ray_df2)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(frame_data, index=['a', 'b', 'c'],\n                          columns=['d', 'e', 'f'])", "code_tokens": " <mask>                       index=['a', 'b', 'c'],\n <mask>                       columns=['d', 'e', 'f'])\n <mask>     ray_df = from_pandas(df, 3)\n <mask> \n <mask>     res1 = ray_df.drop('a')\n <mask>     res2 = ray_df.drop(index='a')\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n <mask>     res1 = ray_df.drop('d', 1)\n <mask>     res2 = ray_df.drop(columns='d')\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     res1 = ray_df.drop('d', 1)\n    res2 = ray_df.drop(columns='d')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('a')\n    ray_df2 = ray_df.drop(index='a')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop(labels='e', axis=1)\n    res2 = ray_df.drop(columns='e')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('d', 1)\n    ray_df2 = ray_df.drop(columns='d')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     # equivalence of the labels/axis and index/columns API's (GH12392)\n    df = pd.DataFrame([[1, 2, 3], [3, 4, 5], [5, 6, 7]],\n                      index=['a', 'b', 'c'],\n                      columns=['d', 'e', 'f'])\n    ray_df = from_pandas(df, 3)\n </s> add     # equivalence of the labels/axis and index/columns API's\n    frame_data = [[1, 2, 3], [3, 4, 5], [5, 6, 7]] </s> remove     res1 = ray_df.drop(['a'], axis=0)\n    res2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(labels='e', axis=1)\n    ray_df2 = ray_df.drop(columns='e')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    res2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(['a'], axis=0)\n    ray_df2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(ray_df1, ray_df2)\n\n    ray_df1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    ray_df2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(ray_df1, ray_df2)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df1 = ray_df.drop('a')\n    ray_df2 = ray_df.drop(index='a')\n    assert ray_df_equals(ray_df1, ray_df2)", "code_tokens": " <mask>     res1 = ray_df.drop('a')\n <mask>     res2 = ray_df.drop(index='a')\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n <mask>     res1 = ray_df.drop('d', 1)\n <mask>     res2 = ray_df.drop(columns='d')\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n <mask>     res1 = ray_df.drop(labels='e', axis=1)\n <mask>     res2 = ray_df.drop(columns='e')\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     res1 = ray_df.drop(labels='e', axis=1)\n    res2 = ray_df.drop(columns='e')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('d', 1)\n    ray_df2 = ray_df.drop(columns='d')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop(['a'], axis=0)\n    res2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(labels='e', axis=1)\n    ray_df2 = ray_df.drop(columns='e')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop('a')\n    res2 = ray_df.drop(index='a')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df = pd.DataFrame(frame_data, index=['a', 'b', 'c'],\n                          columns=['d', 'e', 'f']) </s> remove     res1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    res2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(['a'], axis=0)\n    ray_df2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(ray_df1, ray_df2)\n\n    ray_df1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    ray_df2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     # equivalence of the labels/axis and index/columns API's (GH12392)\n    df = pd.DataFrame([[1, 2, 3], [3, 4, 5], [5, 6, 7]],\n                      index=['a', 'b', 'c'],\n                      columns=['d', 'e', 'f'])\n    ray_df = from_pandas(df, 3)\n </s> add     # equivalence of the labels/axis and index/columns API's\n    frame_data = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df1 = ray_df.drop('d', 1)\n    ray_df2 = ray_df.drop(columns='d')\n    assert ray_df_equals(ray_df1, ray_df2)", "code_tokens": " <mask>     res1 = ray_df.drop('d', 1)\n <mask>     res2 = ray_df.drop(columns='d')\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n <mask>     res1 = ray_df.drop(labels='e', axis=1)\n <mask>     res2 = ray_df.drop(columns='e')\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n <mask>     res1 = ray_df.drop(['a'], axis=0)\n <mask>     res2 = ray_df.drop(index=['a'])\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     res1 = ray_df.drop(['a'], axis=0)\n    res2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(labels='e', axis=1)\n    ray_df2 = ray_df.drop(columns='e')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop('d', 1)\n    res2 = ray_df.drop(columns='d')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('a')\n    ray_df2 = ray_df.drop(index='a')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    res2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(['a'], axis=0)\n    ray_df2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(ray_df1, ray_df2)\n\n    ray_df1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    ray_df2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop('a')\n    res2 = ray_df.drop(index='a')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df = pd.DataFrame(frame_data, index=['a', 'b', 'c'],\n                          columns=['d', 'e', 'f']) </s> remove     # equivalence of the labels/axis and index/columns API's (GH12392)\n    df = pd.DataFrame([[1, 2, 3], [3, 4, 5], [5, 6, 7]],\n                      index=['a', 'b', 'c'],\n                      columns=['d', 'e', 'f'])\n    ray_df = from_pandas(df, 3)\n </s> add     # equivalence of the labels/axis and index/columns API's\n    frame_data = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df1 = ray_df.drop(labels='e', axis=1)\n    ray_df2 = ray_df.drop(columns='e')\n    assert ray_df_equals(ray_df1, ray_df2)", "code_tokens": " <mask>     res1 = ray_df.drop(labels='e', axis=1)\n <mask>     res2 = ray_df.drop(columns='e')\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n <mask>     res1 = ray_df.drop(['a'], axis=0)\n <mask>     res2 = ray_df.drop(index=['a'])\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n <mask>     res1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n <mask>     res2 = ray_df.drop(index=['a'], columns=['d'])\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     res1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    res2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(['a'], axis=0)\n    ray_df2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(ray_df1, ray_df2)\n\n    ray_df1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    ray_df2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop(labels='e', axis=1)\n    res2 = ray_df.drop(columns='e')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('d', 1)\n    ray_df2 = ray_df.drop(columns='d')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop('d', 1)\n    res2 = ray_df.drop(columns='d')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('a')\n    ray_df2 = ray_df.drop(index='a')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop('a')\n    res2 = ray_df.drop(index='a')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df = pd.DataFrame(frame_data, index=['a', 'b', 'c'],\n                          columns=['d', 'e', 'f']) </s> remove     # equivalence of the labels/axis and index/columns API's (GH12392)\n    df = pd.DataFrame([[1, 2, 3], [3, 4, 5], [5, 6, 7]],\n                      index=['a', 'b', 'c'],\n                      columns=['d', 'e', 'f'])\n    ray_df = from_pandas(df, 3)\n </s> add     # equivalence of the labels/axis and index/columns API's\n    frame_data = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df1 = ray_df.drop(['a'], axis=0)\n    ray_df2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(ray_df1, ray_df2)\n\n    ray_df1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n    ray_df2 = ray_df.drop(index=['a'], columns=['d'])\n    assert ray_df_equals(ray_df1, ray_df2)", "code_tokens": " <mask>     res1 = ray_df.drop(['a'], axis=0)\n <mask>     res2 = ray_df.drop(index=['a'])\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n <mask>     res1 = ray_df.drop(['a'], axis=0).drop(['d'], axis=1)\n <mask>     res2 = ray_df.drop(index=['a'], columns=['d'])\n <mask>     assert ray_df_equals(res1, res2)\n <mask> \n <mask>     with pytest.raises(ValueError):\n <mask>         ray_df.drop(labels='a', index='b')\n <mask> \n <mask>     with pytest.raises(ValueError):\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     res1 = ray_df.drop(['a'], axis=0)\n    res2 = ray_df.drop(index=['a'])\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop(labels='e', axis=1)\n    ray_df2 = ray_df.drop(columns='e')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop(labels='e', axis=1)\n    res2 = ray_df.drop(columns='e')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('d', 1)\n    ray_df2 = ray_df.drop(columns='d')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop('d', 1)\n    res2 = ray_df.drop(columns='d')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df1 = ray_df.drop('a')\n    ray_df2 = ray_df.drop(index='a')\n    assert ray_df_equals(ray_df1, ray_df2) </s> remove     res1 = ray_df.drop('a')\n    res2 = ray_df.drop(index='a')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df = pd.DataFrame(frame_data, index=['a', 'b', 'c'],\n                          columns=['d', 'e', 'f']) </s> remove     # equivalence of the labels/axis and index/columns API's (GH12392)\n    df = pd.DataFrame([[1, 2, 3], [3, 4, 5], [5, 6, 7]],\n                      index=['a', 'b', 'c'],\n                      columns=['d', 'e', 'f'])\n    ray_df = from_pandas(df, 3)\n </s> add     # equivalence of the labels/axis and index/columns API's\n    frame_data = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(ray_df.dropna(how='all', axis=[0, 1]),\n                                pd_df.dropna(how='all', axis=[0, 1]))\n    assert ray_df_equals_pandas(ray_df.dropna(how='all', axis=(0, 1)),\n                                pd_df.dropna(how='all', axis=(0, 1)))", "code_tokens": " <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_dropna_multiple_axes(ray_df, pd_df):\n <mask>     assert ray_df_equals_pandas(\n <mask>         ray_df.dropna(how='all', axis=[0, 1]),\n <mask>         pd_df.dropna(how='all', axis=[0, 1])\n <mask>     )\n <mask>     assert ray_df_equals_pandas(\n <mask>         ray_df.dropna(how='all', axis=(0, 1)),\n <mask>         pd_df.dropna(how='all', axis=(0, 1))\n <mask>     )\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_dropna_multiple_axes_inplace(ray_df, pd_df):\n <mask>     ray_df_copy = ray_df.copy()\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove         assert ray_df_equals_pandas(\n            ray_df.dropna(how='any', subset=subset),\n            pd_df.dropna(how='any', subset=subset)\n        )\n </s> add         assert ray_df_equals_pandas(ray_df.dropna(how='any', subset=subset),\n                                    pd_df.dropna(how='any', subset=subset)) </s> remove         assert ray_df_equals_pandas(\n            ray_df.dropna(how='all', subset=subset),\n            pd_df.dropna(how='all', subset=subset)\n        )\n </s> add         assert ray_df_equals_pandas(ray_df.dropna(how='all', subset=subset),\n                                    pd_df.dropna(how='all', subset=subset)) </s> remove             pd_df.dropna(how='all', axis=1, subset=subset)\n        )\n </s> add             pd_df.dropna(how='all', axis=1, subset=subset)) </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.bfill(),\n        test_data.tsframe.bfill()\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.bfill(), test_data.tsframe.bfill()) </s> remove def test_bfill2(num_partitions=2):\n </s> add def test_bfill2():", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "        assert ray_df_equals_pandas(ray_df.dropna(how='all', subset=subset),\n                                    pd_df.dropna(how='all', subset=subset))", "code_tokens": " <mask> \n <mask> @pytest.fixture\n <mask> def test_dropna_subset(ray_df, pd_df, column_subsets, row_subsets):\n <mask>     for subset in column_subsets:\n <mask>         assert ray_df_equals_pandas(\n <mask>             ray_df.dropna(how='all', subset=subset),\n <mask>             pd_df.dropna(how='all', subset=subset)\n <mask>         )\n <mask> \n <mask>         assert ray_df_equals_pandas(\n <mask>             ray_df.dropna(how='any', subset=subset),\n <mask>             pd_df.dropna(how='any', subset=subset)\n <mask>         )\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove         assert ray_df_equals_pandas(\n            ray_df.dropna(how='any', subset=subset),\n            pd_df.dropna(how='any', subset=subset)\n        )\n </s> add         assert ray_df_equals_pandas(ray_df.dropna(how='any', subset=subset),\n                                    pd_df.dropna(how='any', subset=subset)) </s> remove             pd_df.dropna(how='all', axis=1, subset=subset)\n        )\n </s> add             pd_df.dropna(how='all', axis=1, subset=subset)) </s> remove             pd_df.dropna(how='any', axis=1, subset=subset)\n        )\n </s> add             pd_df.dropna(how='any', axis=1, subset=subset)) </s> remove     assert ray_df_equals_pandas(\n        ray_df.dropna(how='all', axis=[0, 1]),\n        pd_df.dropna(how='all', axis=[0, 1])\n    )\n    assert ray_df_equals_pandas(\n        ray_df.dropna(how='all', axis=(0, 1)),\n        pd_df.dropna(how='all', axis=(0, 1))\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.dropna(how='all', axis=[0, 1]),\n                                pd_df.dropna(how='all', axis=[0, 1]))\n    assert ray_df_equals_pandas(ray_df.dropna(how='all', axis=(0, 1)),\n                                pd_df.dropna(how='all', axis=(0, 1))) </s> remove         assert ray_df_equals_pandas(\n            ray_df.fillna(v),\n            df.fillna(v)\n        )\n </s> add         assert ray_df_equals_pandas(ray_df.fillna(v), df.fillna(v))", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "        assert ray_df_equals_pandas(ray_df.dropna(how='any', subset=subset),\n                                    pd_df.dropna(how='any', subset=subset))", "code_tokens": " <mask>             ray_df.dropna(how='all', subset=subset),\n <mask>             pd_df.dropna(how='all', subset=subset)\n <mask>         )\n <mask> \n <mask>         assert ray_df_equals_pandas(\n <mask>             ray_df.dropna(how='any', subset=subset),\n <mask>             pd_df.dropna(how='any', subset=subset)\n <mask>         )\n <mask> \n <mask>     for subset in row_subsets:\n <mask>         assert ray_df_equals_pandas(\n <mask>             ray_df.dropna(how='all', axis=1, subset=subset),\n <mask>             pd_df.dropna(how='all', axis=1, subset=subset)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove             pd_df.dropna(how='all', axis=1, subset=subset)\n        )\n </s> add             pd_df.dropna(how='all', axis=1, subset=subset)) </s> remove         assert ray_df_equals_pandas(\n            ray_df.dropna(how='all', subset=subset),\n            pd_df.dropna(how='all', subset=subset)\n        )\n </s> add         assert ray_df_equals_pandas(ray_df.dropna(how='all', subset=subset),\n                                    pd_df.dropna(how='all', subset=subset)) </s> remove             pd_df.dropna(how='any', axis=1, subset=subset)\n        )\n </s> add             pd_df.dropna(how='any', axis=1, subset=subset)) </s> remove     assert ray_df_equals_pandas(\n        ray_df.dropna(how='all', axis=[0, 1]),\n        pd_df.dropna(how='all', axis=[0, 1])\n    )\n    assert ray_df_equals_pandas(\n        ray_df.dropna(how='all', axis=(0, 1)),\n        pd_df.dropna(how='all', axis=(0, 1))\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.dropna(how='all', axis=[0, 1]),\n                                pd_df.dropna(how='all', axis=[0, 1]))\n    assert ray_df_equals_pandas(ray_df.dropna(how='all', axis=(0, 1)),\n                                pd_df.dropna(how='all', axis=(0, 1))) </s> remove         assert ray_df_equals_pandas(\n            ray_df.fillna(v),\n            df.fillna(v)\n        )\n </s> add         assert ray_df_equals_pandas(ray_df.fillna(v), df.fillna(v))", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "            pd_df.dropna(how='all', axis=1, subset=subset))", "code_tokens": " <mask> \n <mask>     for subset in row_subsets:\n <mask>         assert ray_df_equals_pandas(\n <mask>             ray_df.dropna(how='all', axis=1, subset=subset),\n <mask>             pd_df.dropna(how='all', axis=1, subset=subset)\n <mask>         )\n <mask> \n <mask>         assert ray_df_equals_pandas(\n <mask>             ray_df.dropna(how='any', axis=1, subset=subset),\n <mask>             pd_df.dropna(how='any', axis=1, subset=subset)\n <mask>         )\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove         assert ray_df_equals_pandas(\n            ray_df.dropna(how='any', subset=subset),\n            pd_df.dropna(how='any', subset=subset)\n        )\n </s> add         assert ray_df_equals_pandas(ray_df.dropna(how='any', subset=subset),\n                                    pd_df.dropna(how='any', subset=subset)) </s> remove             pd_df.dropna(how='any', axis=1, subset=subset)\n        )\n </s> add             pd_df.dropna(how='any', axis=1, subset=subset)) </s> remove         assert ray_df_equals_pandas(\n            ray_df.dropna(how='all', subset=subset),\n            pd_df.dropna(how='all', subset=subset)\n        )\n </s> add         assert ray_df_equals_pandas(ray_df.dropna(how='all', subset=subset),\n                                    pd_df.dropna(how='all', subset=subset)) </s> remove     assert ray_df_equals_pandas(\n        ray_df.dropna(how='all', axis=[0, 1]),\n        pd_df.dropna(how='all', axis=[0, 1])\n    )\n    assert ray_df_equals_pandas(\n        ray_df.dropna(how='all', axis=(0, 1)),\n        pd_df.dropna(how='all', axis=(0, 1))\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.dropna(how='all', axis=[0, 1]),\n                                pd_df.dropna(how='all', axis=[0, 1]))\n    assert ray_df_equals_pandas(ray_df.dropna(how='all', axis=(0, 1)),\n                                pd_df.dropna(how='all', axis=(0, 1))) </s> remove     # non-unique - wheee!\n    nu_df = pd.DataFrame(pd.compat.lzip(range(3), range(-3, 1), list('abc')),\n                         columns=['a', 'a', 'b'])\n    ray_nu_df = from_pandas(nu_df, 3)\n </s> add     # non-unique\n    nu_df = pandas.DataFrame(pandas.compat.lzip(range(3), range(-3, 1),\n                                                list('abc')),\n                             columns=['a', 'a', 'b'])\n    ray_nu_df = pd.DataFrame(nu_df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "            pd_df.dropna(how='any', axis=1, subset=subset))", "code_tokens": " <mask>         )\n <mask> \n <mask>         assert ray_df_equals_pandas(\n <mask>             ray_df.dropna(how='any', axis=1, subset=subset),\n <mask>             pd_df.dropna(how='any', axis=1, subset=subset)\n <mask>         )\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_dropna_subset_error(ray_df):\n <mask>     with pytest.raises(KeyError):\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove             pd_df.dropna(how='all', axis=1, subset=subset)\n        )\n </s> add             pd_df.dropna(how='all', axis=1, subset=subset)) </s> remove         assert ray_df_equals_pandas(\n            ray_df.dropna(how='any', subset=subset),\n            pd_df.dropna(how='any', subset=subset)\n        )\n </s> add         assert ray_df_equals_pandas(ray_df.dropna(how='any', subset=subset),\n                                    pd_df.dropna(how='any', subset=subset)) </s> remove         assert ray_df_equals_pandas(\n            ray_df.dropna(how='all', subset=subset),\n            pd_df.dropna(how='all', subset=subset)\n        )\n </s> add         assert ray_df_equals_pandas(ray_df.dropna(how='all', subset=subset),\n                                    pd_df.dropna(how='all', subset=subset)) </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.bfill(),\n        test_data.tsframe.bfill()\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.bfill(), test_data.tsframe.bfill()) </s> remove     # non-unique - wheee!\n    nu_df = pd.DataFrame(pd.compat.lzip(range(3), range(-3, 1), list('abc')),\n                         columns=['a', 'a', 'b'])\n    ray_nu_df = from_pandas(nu_df, 3)\n </s> add     # non-unique\n    nu_df = pandas.DataFrame(pandas.compat.lzip(range(3), range(-3, 1),\n                                                list('abc')),\n                             columns=['a', 'a', 'b'])\n    ray_nu_df = pd.DataFrame(nu_df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = {'col1': [2.9, 3, 3, 3], 'col2': [2, 3, 4, 1]}\n    ray_df1 = pd.DataFrame(frame_data)\n    ray_df2 = pd.DataFrame(frame_data)", "code_tokens": " <mask>     test_comparison_inter_ops(\"eq\")\n <mask> \n <mask> \n <mask> def test_equals():\n <mask>     pandas_df1 = pd.DataFrame({'col1': [2.9, 3, 3, 3],\n <mask>                                'col2': [2, 3, 4, 1]})\n <mask>     ray_df1 = from_pandas(pandas_df1, 2)\n <mask>     ray_df2 = from_pandas(pandas_df1, 3)\n <mask> \n <mask>     assert ray_df1.equals(ray_df2)\n <mask> \n <mask>     pandas_df2 = pd.DataFrame({'col1': [2.9, 3, 3, 3],\n <mask>                                'col2': [2, 3, 5, 1]})\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     pandas_df2 = pd.DataFrame({'col1': [2.9, 3, 3, 3],\n                               'col2': [2, 3, 5, 1]})\n    ray_df3 = from_pandas(pandas_df2, 4)\n </s> add     frame_data = {'col1': [2.9, 3, 3, 3], 'col2': [2, 3, 5, 1]}\n    ray_df3 = pd.DataFrame(frame_data) </s> remove     ray_df = create_test_dataframe()\n    simple = pd.DataFrame({\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]})\n    ray_simple = from_pandas(simple, 2)\n </s> add     frame_data = {\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]}\n    simple = pandas.DataFrame(frame_data)\n    ray_simple = pd.DataFrame(frame_data) </s> remove def test_fillna_dict_series(num_partitions=2):\n    df = pd.DataFrame({'a': [np.nan, 1, 2, np.nan, np.nan],\n                       'b': [1, 2, 3, np.nan, np.nan],\n                       'c': [np.nan, 1, 2, 3, 4]})\n    ray_df = from_pandas(df, num_partitions)\n </s> add def test_fillna_dict_series():\n    frame_data = {'a': [np.nan, 1, 2, np.nan, np.nan],\n                  'b': [1, 2, 3, np.nan, np.nan],\n                  'c': [np.nan, 1, 2, 3, 4]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove def test_fillna_dataframe(num_partitions=2):\n    # GH 8377\n    df = pd.DataFrame({'a': [np.nan, 1, 2, np.nan, np.nan],\n                       'b': [1, 2, 3, np.nan, np.nan],\n                       'c': [np.nan, 1, 2, 3, 4]},\n                      index=list('VWXYZ'))\n    ray_df = from_pandas(df, num_partitions)\n </s> add def test_fillna_dataframe():\n    frame_data = {'a': [np.nan, 1, 2, np.nan, np.nan],\n                  'b': [1, 2, 3, np.nan, np.nan],\n                  'c': [np.nan, 1, 2, 3, 4]}\n    df = pandas.DataFrame(frame_data, index=list('VWXYZ'))\n    ray_df = pd.DataFrame(frame_data, index=list('VWXYZ')) </s> remove     assert ray_df_equals_pandas(\n        ray_df.fillna({'a': 0, 'b': 5}),\n        df.fillna({'a': 0, 'b': 5})\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.fillna({'a': 0, 'b': 5}),\n                                df.fillna({'a': 0, 'b': 5}))", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = {'col1': [2.9, 3, 3, 3], 'col2': [2, 3, 5, 1]}\n    ray_df3 = pd.DataFrame(frame_data)", "code_tokens": " <mask>     ray_df2 = from_pandas(pandas_df1, 3)\n <mask> \n <mask>     assert ray_df1.equals(ray_df2)\n <mask> \n <mask>     pandas_df2 = pd.DataFrame({'col1': [2.9, 3, 3, 3],\n <mask>                                'col2': [2, 3, 5, 1]})\n <mask>     ray_df3 = from_pandas(pandas_df2, 4)\n <mask> \n <mask>     assert not ray_df3.equals(ray_df1)\n <mask>     assert not ray_df3.equals(ray_df2)\n <mask> \n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     pandas_df1 = pd.DataFrame({'col1': [2.9, 3, 3, 3],\n                               'col2': [2, 3, 4, 1]})\n    ray_df1 = from_pandas(pandas_df1, 2)\n    ray_df2 = from_pandas(pandas_df1, 3)\n </s> add     frame_data = {'col1': [2.9, 3, 3, 3], 'col2': [2, 3, 4, 1]}\n    ray_df1 = pd.DataFrame(frame_data)\n    ray_df2 = pd.DataFrame(frame_data) </s> remove     ray_df = create_test_dataframe()\n    simple = pd.DataFrame({\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]})\n    ray_simple = from_pandas(simple, 2)\n </s> add     frame_data = {\"A\": [1, 2, 3, 4], \"B\": [0, 1, 2, 3]}\n    simple = pandas.DataFrame(frame_data)\n    ray_simple = pd.DataFrame(frame_data) </s> remove     assert ray_df_equals_pandas(\n        ray_df.fillna({'a': 0, 'b': 5}),\n        df.fillna({'a': 0, 'b': 5})\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.fillna({'a': 0, 'b': 5}),\n                                df.fillna({'a': 0, 'b': 5})) </s> remove def test_fillna_dict_series(num_partitions=2):\n    df = pd.DataFrame({'a': [np.nan, 1, 2, np.nan, np.nan],\n                       'b': [1, 2, 3, np.nan, np.nan],\n                       'c': [np.nan, 1, 2, 3, 4]})\n    ray_df = from_pandas(df, num_partitions)\n </s> add def test_fillna_dict_series():\n    frame_data = {'a': [np.nan, 1, 2, np.nan, np.nan],\n                  'b': [1, 2, 3, np.nan, np.nan],\n                  'c': [np.nan, 1, 2, 3, 4]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove     df = pd.DataFrame({'a': np.random.randn(10),\n                       'b': np.random.randn(10)})\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data)", "code_tokens": " <mask>     assert not ray_df3.equals(ray_df2)\n <mask> \n <mask> \n <mask> def test_eval_df_use_case():\n <mask>     df = pd.DataFrame({'a': np.random.randn(10),\n <mask>                        'b': np.random.randn(10)})\n <mask>     ray_df = from_pandas(df, 2)\n <mask>     df.eval(\"e = arctan2(sin(a), b)\",\n <mask>             engine='python',\n <mask>             parser='pandas', inplace=True)\n <mask>     ray_df.eval(\"e = arctan2(sin(a), b)\",\n <mask>                 engine='python',\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove             engine='python',\n            parser='pandas', inplace=True)\n </s> add             engine='python', parser='pandas', inplace=True) </s> remove             engine='python',\n            parser='pandas', inplace=True)\n </s> add             engine='python', parser='pandas', inplace=True) </s> remove     df = pd.DataFrame({'a': np.random.randn(10),\n                       'b': np.random.randn(10)})\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove                 engine='python',\n                parser='pandas', inplace=True)\n </s> add                 engine='python', parser='pandas', inplace=True) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "            engine='python', parser='pandas', inplace=True)", "code_tokens": " <mask>     df = pd.DataFrame({'a': np.random.randn(10),\n <mask>                        'b': np.random.randn(10)})\n <mask>     ray_df = from_pandas(df, 2)\n <mask>     df.eval(\"e = arctan2(sin(a), b)\",\n <mask>             engine='python',\n <mask>             parser='pandas', inplace=True)\n <mask>     ray_df.eval(\"e = arctan2(sin(a), b)\",\n <mask>                 engine='python',\n <mask>                 parser='pandas', inplace=True)\n <mask>     # TODO: Use a series equality validator.\n <mask>     assert ray_df_equals_pandas(ray_df, df)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove             engine='python',\n            parser='pandas', inplace=True)\n </s> add             engine='python', parser='pandas', inplace=True) </s> remove     df = pd.DataFrame({'a': np.random.randn(10),\n                       'b': np.random.randn(10)})\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove                 engine='python',\n                parser='pandas', inplace=True)\n </s> add                 engine='python', parser='pandas', inplace=True) </s> remove     df = pd.DataFrame({'a': np.random.randn(10),\n                       'b': np.random.randn(10)})\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data)", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_df, df)\n <mask> \n <mask> \n <mask> def test_eval_df_arithmetic_subexpression():\n <mask>     df = pd.DataFrame({'a': np.random.randn(10),\n <mask>                        'b': np.random.randn(10)})\n <mask>     ray_df = from_pandas(df, 2)\n <mask>     df.eval(\"not_e = sin(a + b)\",\n <mask>             engine='python',\n <mask>             parser='pandas', inplace=True)\n <mask>     ray_df.eval(\"not_e = sin(a + b)\",\n <mask>                 engine='python',\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove             engine='python',\n            parser='pandas', inplace=True)\n </s> add             engine='python', parser='pandas', inplace=True) </s> remove                 engine='python',\n                parser='pandas', inplace=True)\n </s> add                 engine='python', parser='pandas', inplace=True) </s> remove             engine='python',\n            parser='pandas', inplace=True)\n </s> add             engine='python', parser='pandas', inplace=True) </s> remove     df = pd.DataFrame({'a': np.random.randn(10),\n                       'b': np.random.randn(10)})\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "            engine='python', parser='pandas', inplace=True)", "code_tokens": " <mask>     df = pd.DataFrame({'a': np.random.randn(10),\n <mask>                        'b': np.random.randn(10)})\n <mask>     ray_df = from_pandas(df, 2)\n <mask>     df.eval(\"not_e = sin(a + b)\",\n <mask>             engine='python',\n <mask>             parser='pandas', inplace=True)\n <mask>     ray_df.eval(\"not_e = sin(a + b)\",\n <mask>                 engine='python',\n <mask>                 parser='pandas', inplace=True)\n <mask>     # TODO: Use a series equality validator.\n <mask>     assert ray_df_equals_pandas(ray_df, df)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove                 engine='python',\n                parser='pandas', inplace=True)\n </s> add                 engine='python', parser='pandas', inplace=True) </s> remove     df = pd.DataFrame({'a': np.random.randn(10),\n                       'b': np.random.randn(10)})\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove             engine='python',\n            parser='pandas', inplace=True)\n </s> add             engine='python', parser='pandas', inplace=True) </s> remove     df = pd.DataFrame({'a': np.random.randn(10),\n                       'b': np.random.randn(10)})\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "                engine='python', parser='pandas', inplace=True)", "code_tokens": " <mask>     df.eval(\"not_e = sin(a + b)\",\n <mask>             engine='python',\n <mask>             parser='pandas', inplace=True)\n <mask>     ray_df.eval(\"not_e = sin(a + b)\",\n <mask>                 engine='python',\n <mask>                 parser='pandas', inplace=True)\n <mask>     # TODO: Use a series equality validator.\n <mask>     assert ray_df_equals_pandas(ray_df, df)\n <mask> \n <mask> \n <mask> def test_ewm():\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove             engine='python',\n            parser='pandas', inplace=True)\n </s> add             engine='python', parser='pandas', inplace=True) </s> remove             engine='python',\n            parser='pandas', inplace=True)\n </s> add             engine='python', parser='pandas', inplace=True) </s> remove     df = pd.DataFrame({'a': np.random.randn(10),\n                       'b': np.random.randn(10)})\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove     df = pd.DataFrame({'a': np.random.randn(10),\n                       'b': np.random.randn(10)})\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = {'a': np.random.randn(10), 'b': np.random.randn(10)}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "def test_ffill():", "code_tokens": " <mask>         ray_df.expanding()\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_ffill(num_partitions=2):\n <mask>     test_data = TestData()\n <mask>     test_data.tsframe['A'][:5] = np.nan\n <mask>     test_data.tsframe['A'][-5:] = np.nan\n <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions)\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe) </s> remove def test_bfill2(num_partitions=2):\n </s> add def test_bfill2(): </s> remove def test_bfill(num_partitions=2):\n </s> add def test_bfill(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill'),\n        test_data.tsframe.fillna(method='ffill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='ffill'),\n                                test_data.tsframe.fillna(method='ffill')) </s> remove def test_ffill2(num_partitions=2):\n </s> add def test_ffill2():", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(test_data.tsframe)", "code_tokens": " <mask> def test_ffill(num_partitions=2):\n <mask>     test_data = TestData()\n <mask>     test_data.tsframe['A'][:5] = np.nan\n <mask>     test_data.tsframe['A'][-5:] = np.nan\n <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions)\n <mask> \n <mask>     assert ray_df_equals_pandas(\n <mask>         ray_df.ffill(),\n <mask>         test_data.tsframe.ffill()\n <mask>     )\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     assert ray_df_equals_pandas(\n        ray_df.ffill(),\n        test_data.tsframe.ffill()\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.ffill(), test_data.tsframe.ffill()) </s> remove def test_ffill(num_partitions=2):\n </s> add def test_ffill(): </s> remove def test_bfill2(num_partitions=2):\n </s> add def test_bfill2(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill'),\n        test_data.tsframe.fillna(method='ffill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='ffill'),\n                                test_data.tsframe.fillna(method='ffill')) </s> remove def test_ffill2(num_partitions=2):\n </s> add def test_ffill2():", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    assert ray_df_equals_pandas(ray_df.ffill(), test_data.tsframe.ffill())", "code_tokens": " <mask>     test_data.tsframe['A'][:5] = np.nan\n <mask>     test_data.tsframe['A'][-5:] = np.nan\n <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions)\n <mask> \n <mask>     assert ray_df_equals_pandas(\n <mask>         ray_df.ffill(),\n <mask>         test_data.tsframe.ffill()\n <mask>     )\n <mask> \n <mask> \n <mask> def test_fillna():\n <mask>     test_fillna_sanity()\n <mask>     test_fillna_downcast()\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe) </s> remove def test_bfill2(num_partitions=2):\n </s> add def test_bfill2(): </s> remove def test_ffill2(num_partitions=2):\n </s> add def test_ffill2(): </s> remove def test_bfill(num_partitions=2):\n </s> add def test_bfill(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill'),\n        test_data.tsframe.fillna(method='ffill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='ffill'),\n                                test_data.tsframe.fillna(method='ffill'))", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "def test_fillna_sanity():", "code_tokens": " <mask>     test_fillna_col_reordering()\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_fillna_sanity(num_partitions=2):\n <mask>     test_data = TestData()\n <mask>     tf = test_data.tsframe\n <mask>     tf.loc[tf.index[:5], 'A'] = np.nan\n <mask>     tf.loc[tf.index[-5:], 'A'] = np.nan\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions).fillna(0)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe).fillna(0) </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill'),\n        test_data.tsframe.fillna(method='ffill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='ffill'),\n                                test_data.tsframe.fillna(method='ffill')) </s> remove def test_ffill(num_partitions=2):\n </s> add def test_ffill(): </s> remove def test_bfill2(num_partitions=2):\n </s> add def test_bfill2(): </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(value=0)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(test_data.tsframe).fillna(0)", "code_tokens": " <mask>     tf.loc[tf.index[:5], 'A'] = np.nan\n <mask>     tf.loc[tf.index[-5:], 'A'] = np.nan\n <mask> \n <mask>     zero_filled = test_data.tsframe.fillna(0)\n <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions).fillna(0)\n <mask>     assert ray_df_equals_pandas(ray_df, zero_filled)\n <mask> \n <mask>     padded = test_data.tsframe.fillna(method='pad')\n <mask>     ray_df = from_pandas(test_data.tsframe,\n <mask>                          num_partitions).fillna(method='pad')\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(test_data.tsframe,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.tsframe).fillna(method='pad') </s> remove def test_fillna_sanity(num_partitions=2):\n </s> add def test_fillna_sanity(): </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(value=0) </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(mf).fillna(value=0) </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(test_data.tsframe).fillna(method='pad')", "code_tokens": " <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions).fillna(0)\n <mask>     assert ray_df_equals_pandas(ray_df, zero_filled)\n <mask> \n <mask>     padded = test_data.tsframe.fillna(method='pad')\n <mask>     ray_df = from_pandas(test_data.tsframe,\n <mask>                          num_partitions).fillna(method='pad')\n <mask>     assert ray_df_equals_pandas(ray_df, padded)\n <mask> \n <mask>     # mixed type\n <mask>     mf = test_data.mixed_frame\n <mask>     mf.loc[mf.index[5:20], 'foo'] = np.nan\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions).fillna(0)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe).fillna(0) </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(value=0) </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(mf).fillna(value=0) </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(method='pad') </s> remove def test_ffill2(num_partitions=2):\n </s> add def test_ffill2():", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(test_data.mixed_frame).fillna(value=0)", "code_tokens": " <mask>     mf.loc[mf.index[5:20], 'foo'] = np.nan\n <mask>     mf.loc[mf.index[-10:], 'A'] = np.nan\n <mask> \n <mask>     result = test_data.mixed_frame.fillna(value=0)\n <mask>     ray_df = from_pandas(test_data.mixed_frame,\n <mask>                          num_partitions).fillna(value=0)\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     result = test_data.mixed_frame.fillna(method='pad')\n <mask>     ray_df = from_pandas(test_data.mixed_frame,\n <mask>                          num_partitions).fillna(method='pad')\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(method='pad') </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(mf).fillna(value=0) </s> remove     ray_df = from_pandas(test_data.tsframe,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.tsframe).fillna(method='pad') </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions).fillna(0)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe).fillna(0) </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(mf).fillna(method='pad')", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(test_data.mixed_frame).fillna(method='pad')", "code_tokens": " <mask>                          num_partitions).fillna(value=0)\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     result = test_data.mixed_frame.fillna(method='pad')\n <mask>     ray_df = from_pandas(test_data.mixed_frame,\n <mask>                          num_partitions).fillna(method='pad')\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     pytest.raises(ValueError, test_data.tsframe.fillna)\n <mask>     pytest.raises(ValueError, from_pandas(test_data.tsframe,\n <mask>                                           num_partitions).fillna)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     pytest.raises(ValueError, from_pandas(test_data.tsframe,\n                                          num_partitions).fillna)\n </s> add     pytest.raises(ValueError, pd.DataFrame(test_data.tsframe).fillna) </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(value=0) </s> remove         from_pandas(test_data.tsframe, num_partitions).fillna(\n            5, method='ffill'\n        )\n </s> add         pd.DataFrame(test_data.tsframe).fillna(5, method='ffill') </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(mf).fillna(value=0) </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(mf).fillna(method='pad')", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    pytest.raises(ValueError, pd.DataFrame(test_data.tsframe).fillna)", "code_tokens": " <mask>                          num_partitions).fillna(method='pad')\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     pytest.raises(ValueError, test_data.tsframe.fillna)\n <mask>     pytest.raises(ValueError, from_pandas(test_data.tsframe,\n <mask>                                           num_partitions).fillna)\n <mask>     with pytest.raises(ValueError):\n <mask>         from_pandas(test_data.tsframe, num_partitions).fillna(\n <mask>             5, method='ffill'\n <mask>         )\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove         from_pandas(test_data.tsframe, num_partitions).fillna(\n            5, method='ffill'\n        )\n </s> add         pd.DataFrame(test_data.tsframe).fillna(5, method='ffill') </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(method='pad') </s> remove     ray_df = from_pandas(test_data.tsframe,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.tsframe).fillna(method='pad') </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.bfill(),\n        test_data.tsframe.bfill()\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.bfill(), test_data.tsframe.bfill()) </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions).fillna(0)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe).fillna(0)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "        pd.DataFrame(test_data.tsframe).fillna(5, method='ffill')", "code_tokens": " <mask>     pytest.raises(ValueError, test_data.tsframe.fillna)\n <mask>     pytest.raises(ValueError, from_pandas(test_data.tsframe,\n <mask>                                           num_partitions).fillna)\n <mask>     with pytest.raises(ValueError):\n <mask>         from_pandas(test_data.tsframe, num_partitions).fillna(\n <mask>             5, method='ffill'\n <mask>         )\n <mask> \n <mask>     # mixed numeric (but no float16)\n <mask>     mf = test_data.mixed_float.reindex(columns=['A', 'B', 'D'])\n <mask>     mf.loc[mf.index[-10:], 'A'] = np.nan\n <mask>     result = mf.fillna(value=0)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(mf).fillna(value=0) </s> remove     pytest.raises(ValueError, from_pandas(test_data.tsframe,\n                                          num_partitions).fillna)\n </s> add     pytest.raises(ValueError, pd.DataFrame(test_data.tsframe).fillna) </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(method='pad') </s> remove     ray_df = from_pandas(test_data.tsframe,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.tsframe).fillna(method='pad') </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions).fillna(0)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe).fillna(0)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(mf).fillna(value=0)", "code_tokens": " <mask>     # mixed numeric (but no float16)\n <mask>     mf = test_data.mixed_float.reindex(columns=['A', 'B', 'D'])\n <mask>     mf.loc[mf.index[-10:], 'A'] = np.nan\n <mask>     result = mf.fillna(value=0)\n <mask>     ray_df = from_pandas(mf, num_partitions).fillna(value=0)\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     result = mf.fillna(method='pad')\n <mask>     ray_df = from_pandas(mf, num_partitions).fillna(method='pad')\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove         from_pandas(test_data.tsframe, num_partitions).fillna(\n            5, method='ffill'\n        )\n </s> add         pd.DataFrame(test_data.tsframe).fillna(5, method='ffill') </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(mf).fillna(method='pad') </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(value=0) </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(method='pad') </s> remove     ray_df = from_pandas(test_data.tsframe,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.tsframe).fillna(method='pad')", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(mf).fillna(method='pad')", "code_tokens": " <mask>     ray_df = from_pandas(mf, num_partitions).fillna(value=0)\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     result = mf.fillna(method='pad')\n <mask>     ray_df = from_pandas(mf, num_partitions).fillna(method='pad')\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     # TODO: Use this when Arrow issue resolves:\n <mask>     # (https://issues.apache.org/jira/browse/ARROW-2122)\n <mask>     # empty frame (GH #2778)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     # empty frame (GH #2778)\n </s> add     # empty frame </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(mf).fillna(value=0) </s> remove     ray_df = from_pandas(df, num_partitions).fillna(\n        value={'Date': df['Date2']}\n    )\n </s> add     ray_df = pd.DataFrame(frame_data).fillna(value={'Date': df['Date2']}) </s> remove     # GH 15855\n </s> add  </s> remove     ray_df = from_pandas(test_data.mixed_frame,\n                         num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(test_data.mixed_frame).fillna(method='pad')", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    # empty frame", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     # TODO: Use this when Arrow issue resolves:\n <mask>     # (https://issues.apache.org/jira/browse/ARROW-2122)\n <mask>     # empty frame (GH #2778)\n <mask>     # df = DataFrame(columns=['x'])\n <mask>     # for m in ['pad', 'backfill']:\n <mask>     #     df.x.fillna(method=m, inplace=True)\n <mask>     #     df.x.fillna(method=m)\n <mask> \n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(mf).fillna(method='pad') </s> remove     # GH 15855\n </s> add  </s> remove     ray_df = from_pandas(df, num_partitions).fillna(\n        value={'Date': df['Date2']}\n    )\n </s> add     ray_df = pd.DataFrame(frame_data).fillna(value={'Date': df['Date2']}) </s> remove     # with different dtype (GH3386)\n    df = pd.DataFrame([['a', 'a', np.nan, 'a'], [\n                        'b', 'b', np.nan, 'b'], ['c', 'c', np.nan, 'c']])\n </s> add     # with different dtype\n    frame_data = [['a', 'a', np.nan, 'a'],\n                  ['b', 'b', np.nan, 'b'],\n                  ['c', 'c', np.nan, 'c']]\n    df = pandas.DataFrame(frame_data) </s> remove     df = pd.DataFrame(index=[\"A\", \"B\", \"C\"], columns=[1, 2, 3, 4, 5])\n\n    # empty block\n    df = pd.DataFrame(index=range(3), columns=['A', 'B'], dtype='float64')\n    ray_df = from_pandas(df, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna('nan'),\n        df.fillna('nan')\n    )\n </s> add     df = pandas.DataFrame(index=range(3), columns=['A', 'B'], dtype='float64')\n    ray_df = pd.DataFrame(index=range(3), columns=['A', 'B'], dtype='float64')\n    assert ray_df_equals_pandas(ray_df.fillna('nan'), df.fillna('nan'))", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    # with different dtype\n    frame_data = [['a', 'a', np.nan, 'a'],\n                  ['b', 'b', np.nan, 'b'],\n                  ['c', 'c', np.nan, 'c']]\n    df = pandas.DataFrame(frame_data)", "code_tokens": " <mask>     # for m in ['pad', 'backfill']:\n <mask>     #     df.x.fillna(method=m, inplace=True)\n <mask>     #     df.x.fillna(method=m)\n <mask> \n <mask>     # with different dtype (GH3386)\n <mask>     df = pd.DataFrame([['a', 'a', np.nan, 'a'], [\n <mask>                         'b', 'b', np.nan, 'b'], ['c', 'c', np.nan, 'c']])\n <mask> \n <mask>     result = df.fillna({2: 'foo'})\n <mask>     ray_df = from_pandas(df, num_partitions).fillna({2: 'foo'})\n <mask> \n <mask>     assert ray_df_equals_pandas(ray_df, result)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df, num_partitions).fillna({2: 'foo'})\n </s> add     ray_df = pd.DataFrame(frame_data).fillna({2: 'foo'}) </s> remove     # empty frame (GH #2778)\n </s> add     # empty frame </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df) </s> remove     # limit and value\n    df = pd.DataFrame(np.random.randn(10, 3))\n    df.iloc[2:7, 0] = np.nan\n    df.iloc[3:5, 2] = np.nan\n\n    # result = df.fillna(999, limit=1)\n    # ray_df = from_pandas(df, num_partitions).fillna(999, limit=1)\n\n    # assert ray_df_equals_pandas(ray_df, result)\n\n    # with datelike\n    # GH 6344\n    df = pd.DataFrame({\n        'Date': [pd.NaT, pd.Timestamp(\"2014-1-1\")],\n        'Date2': [pd.Timestamp(\"2013-1-1\"), pd.NaT]\n    })\n </s> add     frame_data = {'Date': [pandas.NaT, pandas.Timestamp(\"2014-1-1\")],\n                  'Date2': [pandas.Timestamp(\"2013-1-1\"), pandas.NaT]}\n    df = pandas.DataFrame(frame_data) </s> remove     # equiv of replace\n    df = pd.DataFrame({'A': [1, np.nan], 'B': [1., 2.]})\n    ray_df = from_pandas(df, num_partitions)\n </s> add     frame_data = {'A': [1, np.nan], 'B': [1., 2.]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(frame_data).fillna({2: 'foo'})", "code_tokens": " <mask>     df = pd.DataFrame([['a', 'a', np.nan, 'a'], [\n <mask>                         'b', 'b', np.nan, 'b'], ['c', 'c', np.nan, 'c']])\n <mask> \n <mask>     result = df.fillna({2: 'foo'})\n <mask>     ray_df = from_pandas(df, num_partitions).fillna({2: 'foo'})\n <mask> \n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     ray_df = from_pandas(df, num_partitions)\n <mask>     df.fillna({2: 'foo'}, inplace=True)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     # with different dtype (GH3386)\n    df = pd.DataFrame([['a', 'a', np.nan, 'a'], [\n                        'b', 'b', np.nan, 'b'], ['c', 'c', np.nan, 'c']])\n </s> add     # with different dtype\n    frame_data = [['a', 'a', np.nan, 'a'],\n                  ['b', 'b', np.nan, 'b'],\n                  ['c', 'c', np.nan, 'c']]\n    df = pandas.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df) </s> remove     # limit and value\n    df = pd.DataFrame(np.random.randn(10, 3))\n    df.iloc[2:7, 0] = np.nan\n    df.iloc[3:5, 2] = np.nan\n\n    # result = df.fillna(999, limit=1)\n    # ray_df = from_pandas(df, num_partitions).fillna(999, limit=1)\n\n    # assert ray_df_equals_pandas(ray_df, result)\n\n    # with datelike\n    # GH 6344\n    df = pd.DataFrame({\n        'Date': [pd.NaT, pd.Timestamp(\"2014-1-1\")],\n        'Date2': [pd.Timestamp(\"2013-1-1\"), pd.NaT]\n    })\n </s> add     frame_data = {'Date': [pandas.NaT, pandas.Timestamp(\"2014-1-1\")],\n                  'Date2': [pandas.Timestamp(\"2013-1-1\"), pandas.NaT]}\n    df = pandas.DataFrame(frame_data) </s> remove def test_fillna_dict_series(num_partitions=2):\n    df = pd.DataFrame({'a': [np.nan, 1, 2, np.nan, np.nan],\n                       'b': [1, 2, 3, np.nan, np.nan],\n                       'c': [np.nan, 1, 2, 3, 4]})\n    ray_df = from_pandas(df, num_partitions)\n </s> add def test_fillna_dict_series():\n    frame_data = {'a': [np.nan, 1, 2, np.nan, np.nan],\n                  'b': [1, 2, 3, np.nan, np.nan],\n                  'c': [np.nan, 1, 2, 3, 4]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove     res1 = ray_df.drop('a')\n    res2 = ray_df.drop(index='a')\n    assert ray_df_equals(res1, res2)\n </s> add     ray_df = pd.DataFrame(frame_data, index=['a', 'b', 'c'],\n                          columns=['d', 'e', 'f'])", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(df)", "code_tokens": " <mask>     ray_df = from_pandas(df, num_partitions).fillna({2: 'foo'})\n <mask> \n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     ray_df = from_pandas(df, num_partitions)\n <mask>     df.fillna({2: 'foo'}, inplace=True)\n <mask>     ray_df.fillna({2: 'foo'}, inplace=True)\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     # limit and value\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df, num_partitions).fillna({2: 'foo'})\n </s> add     ray_df = pd.DataFrame(frame_data).fillna({2: 'foo'}) </s> remove     # limit and value\n    df = pd.DataFrame(np.random.randn(10, 3))\n    df.iloc[2:7, 0] = np.nan\n    df.iloc[3:5, 2] = np.nan\n\n    # result = df.fillna(999, limit=1)\n    # ray_df = from_pandas(df, num_partitions).fillna(999, limit=1)\n\n    # assert ray_df_equals_pandas(ray_df, result)\n\n    # with datelike\n    # GH 6344\n    df = pd.DataFrame({\n        'Date': [pd.NaT, pd.Timestamp(\"2014-1-1\")],\n        'Date2': [pd.Timestamp(\"2013-1-1\"), pd.NaT]\n    })\n </s> add     frame_data = {'Date': [pandas.NaT, pandas.Timestamp(\"2014-1-1\")],\n                  'Date2': [pandas.Timestamp(\"2013-1-1\"), pandas.NaT]}\n    df = pandas.DataFrame(frame_data) </s> remove     # with different dtype (GH3386)\n    df = pd.DataFrame([['a', 'a', np.nan, 'a'], [\n                        'b', 'b', np.nan, 'b'], ['c', 'c', np.nan, 'c']])\n </s> add     # with different dtype\n    frame_data = [['a', 'a', np.nan, 'a'],\n                  ['b', 'b', np.nan, 'b'],\n                  ['c', 'c', np.nan, 'c']]\n    df = pandas.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions).fillna(value={0: 0},\n                                                    inplace=True)\n </s> add     ray_df = pd.DataFrame(df).fillna(value={0: 0}, inplace=True) </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     df = pandas.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = {'Date': [pandas.NaT, pandas.Timestamp(\"2014-1-1\")],\n                  'Date2': [pandas.Timestamp(\"2013-1-1\"), pandas.NaT]}\n    df = pandas.DataFrame(frame_data)", "code_tokens": " <mask>     df.fillna({2: 'foo'}, inplace=True)\n <mask>     ray_df.fillna({2: 'foo'}, inplace=True)\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     # limit and value\n <mask>     df = pd.DataFrame(np.random.randn(10, 3))\n <mask>     df.iloc[2:7, 0] = np.nan\n <mask>     df.iloc[3:5, 2] = np.nan\n <mask> \n <mask>     # result = df.fillna(999, limit=1)\n <mask>     # ray_df = from_pandas(df, num_partitions).fillna(999, limit=1)\n <mask> \n <mask>     # assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     # with datelike\n <mask>     # GH 6344\n <mask>     df = pd.DataFrame({\n <mask>         'Date': [pd.NaT, pd.Timestamp(\"2014-1-1\")],\n <mask>         'Date2': [pd.Timestamp(\"2013-1-1\"), pd.NaT]\n <mask>     })\n <mask>     result = df.fillna(value={'Date': df['Date2']})\n <mask>     ray_df = from_pandas(df, num_partitions).fillna(\n <mask>         value={'Date': df['Date2']}\n <mask>     )\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df, num_partitions).fillna(\n        value={'Date': df['Date2']}\n    )\n </s> add     ray_df = pd.DataFrame(frame_data).fillna(value={'Date': df['Date2']}) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df) </s> remove     ray_df = from_pandas(df, num_partitions).fillna({2: 'foo'})\n </s> add     ray_df = pd.DataFrame(frame_data).fillna({2: 'foo'}) </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     df = pandas.DataFrame(frame_data) </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(value=0)\n </s> add     ray_df = pd.DataFrame(mf).fillna(value=0)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(frame_data).fillna(value={'Date': df['Date2']})", "code_tokens": " <mask>         'Date': [pd.NaT, pd.Timestamp(\"2014-1-1\")],\n <mask>         'Date2': [pd.Timestamp(\"2013-1-1\"), pd.NaT]\n <mask>     })\n <mask>     result = df.fillna(value={'Date': df['Date2']})\n <mask>     ray_df = from_pandas(df, num_partitions).fillna(\n <mask>         value={'Date': df['Date2']}\n <mask>     )\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     # TODO: Use this when Arrow issue resolves:\n <mask>     # (https://issues.apache.org/jira/browse/ARROW-2122)\n <mask>     # with timezone\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     # limit and value\n    df = pd.DataFrame(np.random.randn(10, 3))\n    df.iloc[2:7, 0] = np.nan\n    df.iloc[3:5, 2] = np.nan\n\n    # result = df.fillna(999, limit=1)\n    # ray_df = from_pandas(df, num_partitions).fillna(999, limit=1)\n\n    # assert ray_df_equals_pandas(ray_df, result)\n\n    # with datelike\n    # GH 6344\n    df = pd.DataFrame({\n        'Date': [pd.NaT, pd.Timestamp(\"2014-1-1\")],\n        'Date2': [pd.Timestamp(\"2013-1-1\"), pd.NaT]\n    })\n </s> add     frame_data = {'Date': [pandas.NaT, pandas.Timestamp(\"2014-1-1\")],\n                  'Date2': [pandas.Timestamp(\"2013-1-1\"), pandas.NaT]}\n    df = pandas.DataFrame(frame_data) </s> remove     # GH 15855\n </s> add  </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(mf).fillna(method='pad') </s> remove     # empty frame (GH #2778)\n </s> add     # empty frame </s> remove     df = pd.DataFrame({'A': [pd.Timestamp('2012-11-11 00:00:00+01:00'),\n                             pd.NaT]})\n    ray_df = from_pandas(df, num_partitions)\n </s> add     frame_data = {'A': [pandas.Timestamp('2012-11-11 00:00:00+01:00'),\n                        pandas.NaT]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "", "code_tokens": " <mask> \n <mask>     # TODO: Use this when Arrow issue resolves:\n <mask>     # (https://issues.apache.org/jira/browse/ARROW-2122)\n <mask>     # with timezone\n <mask>     # GH 15855\n <mask>     \"\"\"\n <mask>     df = pd.DataFrame({'A': [pd.Timestamp('2012-11-11 00:00:00+01:00'),\n <mask>                              pd.NaT]})\n <mask>     ray_df = from_pandas(df, num_partitions)\n <mask>     assert ray_df_equals_pandas(ray_df.fillna(method='pad'),\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     df = pd.DataFrame({'A': [pd.Timestamp('2012-11-11 00:00:00+01:00'),\n                             pd.NaT]})\n    ray_df = from_pandas(df, num_partitions)\n </s> add     frame_data = {'A': [pandas.Timestamp('2012-11-11 00:00:00+01:00'),\n                        pandas.NaT]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions).fillna(\n        value={'Date': df['Date2']}\n    )\n </s> add     ray_df = pd.DataFrame(frame_data).fillna(value={'Date': df['Date2']}) </s> remove     ray_df = from_pandas(mf, num_partitions).fillna(method='pad')\n </s> add     ray_df = pd.DataFrame(mf).fillna(method='pad') </s> remove     # empty frame (GH #2778)\n </s> add     # empty frame </s> remove     df = pd.DataFrame({'A': [pd.NaT,\n                             pd.Timestamp('2012-11-11 00:00:00+01:00')]})\n    ray_df = from_pandas(df, num_partitions).fillna(method='bfill')\n </s> add     frame_data = {'A': [pandas.NaT,\n                        pandas.Timestamp('2012-11-11 00:00:00+01:00')]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data).fillna(method='bfill')", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = {'A': [pandas.Timestamp('2012-11-11 00:00:00+01:00'),\n                        pandas.NaT]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data)", "code_tokens": " <mask>     # (https://issues.apache.org/jira/browse/ARROW-2122)\n <mask>     # with timezone\n <mask>     # GH 15855\n <mask>     \"\"\"\n <mask>     df = pd.DataFrame({'A': [pd.Timestamp('2012-11-11 00:00:00+01:00'),\n <mask>                              pd.NaT]})\n <mask>     ray_df = from_pandas(df, num_partitions)\n <mask>     assert ray_df_equals_pandas(ray_df.fillna(method='pad'),\n <mask>                                 df.fillna(method='pad'))\n <mask> \n <mask>     df = pd.DataFrame({'A': [pd.NaT,\n <mask>                              pd.Timestamp('2012-11-11 00:00:00+01:00')]})\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     # GH 15855\n </s> add  </s> remove     df = pd.DataFrame({'A': [pd.NaT,\n                             pd.Timestamp('2012-11-11 00:00:00+01:00')]})\n    ray_df = from_pandas(df, num_partitions).fillna(method='bfill')\n </s> add     frame_data = {'A': [pandas.NaT,\n                        pandas.Timestamp('2012-11-11 00:00:00+01:00')]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data).fillna(method='bfill') </s> remove     ray_df = from_pandas(df, num_partitions).fillna(\n        value={'Date': df['Date2']}\n    )\n </s> add     ray_df = pd.DataFrame(frame_data).fillna(value={'Date': df['Date2']}) </s> remove     # limit and value\n    df = pd.DataFrame(np.random.randn(10, 3))\n    df.iloc[2:7, 0] = np.nan\n    df.iloc[3:5, 2] = np.nan\n\n    # result = df.fillna(999, limit=1)\n    # ray_df = from_pandas(df, num_partitions).fillna(999, limit=1)\n\n    # assert ray_df_equals_pandas(ray_df, result)\n\n    # with datelike\n    # GH 6344\n    df = pd.DataFrame({\n        'Date': [pd.NaT, pd.Timestamp(\"2014-1-1\")],\n        'Date2': [pd.Timestamp(\"2013-1-1\"), pd.NaT]\n    })\n </s> add     frame_data = {'Date': [pandas.NaT, pandas.Timestamp(\"2014-1-1\")],\n                  'Date2': [pandas.Timestamp(\"2013-1-1\"), pandas.NaT]}\n    df = pandas.DataFrame(frame_data) </s> remove def test_fillna_downcast(num_partitions=2):\n    # GH 15277\n </s> add def test_fillna_downcast():", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = {'A': [pandas.NaT,\n                        pandas.Timestamp('2012-11-11 00:00:00+01:00')]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data).fillna(method='bfill')", "code_tokens": " <mask>     ray_df = from_pandas(df, num_partitions)\n <mask>     assert ray_df_equals_pandas(ray_df.fillna(method='pad'),\n <mask>                                 df.fillna(method='pad'))\n <mask> \n <mask>     df = pd.DataFrame({'A': [pd.NaT,\n <mask>                              pd.Timestamp('2012-11-11 00:00:00+01:00')]})\n <mask>     ray_df = from_pandas(df, num_partitions).fillna(method='bfill')\n <mask>     assert ray_df_equals_pandas(ray_df, df.fillna(method='bfill'))\n <mask>     \"\"\"\n <mask> \n <mask> \n <mask> @pytest.fixture\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     df = pd.DataFrame({'A': [pd.Timestamp('2012-11-11 00:00:00+01:00'),\n                             pd.NaT]})\n    ray_df = from_pandas(df, num_partitions)\n </s> add     frame_data = {'A': [pandas.Timestamp('2012-11-11 00:00:00+01:00'),\n                        pandas.NaT]}\n    df = pandas.DataFrame(frame_data)\n    ray_df = pd.DataFrame(frame_data) </s> remove     # GH 15855\n </s> add  </s> remove def test_fillna_downcast(num_partitions=2):\n    # GH 15277\n </s> add def test_fillna_downcast(): </s> remove     ray_df = from_pandas(df, num_partitions).fillna(value={0: 0},\n                                                    inplace=True)\n </s> add     ray_df = pd.DataFrame(df).fillna(value={0: 0}, inplace=True) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "def test_fillna_downcast():", "code_tokens": " <mask>     \"\"\"\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_fillna_downcast(num_partitions=2):\n <mask>     # GH 15277\n <mask>     # infer int64 from float64\n <mask>     df = pd.DataFrame({'a': [1., np.nan]})\n <mask>     result = df.fillna(0, downcast='infer')\n <mask>     ray_df = from_pandas(df, num_partitions).fillna(0, downcast='infer')\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df, num_partitions).fillna(0, downcast='infer')\n </s> add     ray_df = pd.DataFrame(frame_data).fillna(0, downcast='infer') </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     frame_data = {'a': [1., np.nan]}\n    df = pandas.DataFrame(frame_data) </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     df = pandas.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions).fillna(\n        {'a': 0}, downcast='infer'\n    )\n </s> add     ray_df = pd.DataFrame(frame_data).fillna({'a': 0}, downcast='infer') </s> remove     # limit and value\n    df = pd.DataFrame(np.random.randn(10, 3))\n    df.iloc[2:7, 0] = np.nan\n    df.iloc[3:5, 2] = np.nan\n\n    # result = df.fillna(999, limit=1)\n    # ray_df = from_pandas(df, num_partitions).fillna(999, limit=1)\n\n    # assert ray_df_equals_pandas(ray_df, result)\n\n    # with datelike\n    # GH 6344\n    df = pd.DataFrame({\n        'Date': [pd.NaT, pd.Timestamp(\"2014-1-1\")],\n        'Date2': [pd.Timestamp(\"2013-1-1\"), pd.NaT]\n    })\n </s> add     frame_data = {'Date': [pandas.NaT, pandas.Timestamp(\"2014-1-1\")],\n                  'Date2': [pandas.Timestamp(\"2013-1-1\"), pandas.NaT]}\n    df = pandas.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = {'a': [1., np.nan]}\n    df = pandas.DataFrame(frame_data)", "code_tokens": " <mask> @pytest.fixture\n <mask> def test_fillna_downcast(num_partitions=2):\n <mask>     # GH 15277\n <mask>     # infer int64 from float64\n <mask>     df = pd.DataFrame({'a': [1., np.nan]})\n <mask>     result = df.fillna(0, downcast='infer')\n <mask>     ray_df = from_pandas(df, num_partitions).fillna(0, downcast='infer')\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     # infer int64 from float64 when fillna value is a dict\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df, num_partitions).fillna(0, downcast='infer')\n </s> add     ray_df = pd.DataFrame(frame_data).fillna(0, downcast='infer') </s> remove def test_fillna_downcast(num_partitions=2):\n    # GH 15277\n </s> add def test_fillna_downcast(): </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     df = pandas.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions).fillna(\n        {'a': 0}, downcast='infer'\n    )\n </s> add     ray_df = pd.DataFrame(frame_data).fillna({'a': 0}, downcast='infer') </s> remove     # limit and value\n    df = pd.DataFrame(np.random.randn(10, 3))\n    df.iloc[2:7, 0] = np.nan\n    df.iloc[3:5, 2] = np.nan\n\n    # result = df.fillna(999, limit=1)\n    # ray_df = from_pandas(df, num_partitions).fillna(999, limit=1)\n\n    # assert ray_df_equals_pandas(ray_df, result)\n\n    # with datelike\n    # GH 6344\n    df = pd.DataFrame({\n        'Date': [pd.NaT, pd.Timestamp(\"2014-1-1\")],\n        'Date2': [pd.Timestamp(\"2013-1-1\"), pd.NaT]\n    })\n </s> add     frame_data = {'Date': [pandas.NaT, pandas.Timestamp(\"2014-1-1\")],\n                  'Date2': [pandas.Timestamp(\"2013-1-1\"), pandas.NaT]}\n    df = pandas.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(frame_data).fillna(0, downcast='infer')", "code_tokens": " <mask>     # GH 15277\n <mask>     # infer int64 from float64\n <mask>     df = pd.DataFrame({'a': [1., np.nan]})\n <mask>     result = df.fillna(0, downcast='infer')\n <mask>     ray_df = from_pandas(df, num_partitions).fillna(0, downcast='infer')\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     # infer int64 from float64 when fillna value is a dict\n <mask>     df = pd.DataFrame({'a': [1., np.nan]})\n <mask>     result = df.fillna({'a': 0}, downcast='infer')\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     frame_data = {'a': [1., np.nan]}\n    df = pandas.DataFrame(frame_data) </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     df = pandas.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions).fillna(\n        {'a': 0}, downcast='infer'\n    )\n </s> add     ray_df = pd.DataFrame(frame_data).fillna({'a': 0}, downcast='infer') </s> remove def test_fillna_downcast(num_partitions=2):\n    # GH 15277\n </s> add def test_fillna_downcast(): </s> remove     # limit and value\n    df = pd.DataFrame(np.random.randn(10, 3))\n    df.iloc[2:7, 0] = np.nan\n    df.iloc[3:5, 2] = np.nan\n\n    # result = df.fillna(999, limit=1)\n    # ray_df = from_pandas(df, num_partitions).fillna(999, limit=1)\n\n    # assert ray_df_equals_pandas(ray_df, result)\n\n    # with datelike\n    # GH 6344\n    df = pd.DataFrame({\n        'Date': [pd.NaT, pd.Timestamp(\"2014-1-1\")],\n        'Date2': [pd.Timestamp(\"2013-1-1\"), pd.NaT]\n    })\n </s> add     frame_data = {'Date': [pandas.NaT, pandas.Timestamp(\"2014-1-1\")],\n                  'Date2': [pandas.Timestamp(\"2013-1-1\"), pandas.NaT]}\n    df = pandas.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    df = pandas.DataFrame(frame_data)", "code_tokens": " <mask>     ray_df = from_pandas(df, num_partitions).fillna(0, downcast='infer')\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask>     # infer int64 from float64 when fillna value is a dict\n <mask>     df = pd.DataFrame({'a': [1., np.nan]})\n <mask>     result = df.fillna({'a': 0}, downcast='infer')\n <mask>     ray_df = from_pandas(df, num_partitions).fillna(\n <mask>         {'a': 0}, downcast='infer'\n <mask>     )\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df, num_partitions).fillna(\n        {'a': 0}, downcast='infer'\n    )\n </s> add     ray_df = pd.DataFrame(frame_data).fillna({'a': 0}, downcast='infer') </s> remove     ray_df = from_pandas(df, num_partitions).fillna(0, downcast='infer')\n </s> add     ray_df = pd.DataFrame(frame_data).fillna(0, downcast='infer') </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     frame_data = {'a': [1., np.nan]}\n    df = pandas.DataFrame(frame_data) </s> remove def test_fillna_downcast(num_partitions=2):\n    # GH 15277\n </s> add def test_fillna_downcast(): </s> remove     ray_df = from_pandas(df, num_partitions).fillna(value={0: 0},\n                                                    inplace=True)\n </s> add     ray_df = pd.DataFrame(df).fillna(value={0: 0}, inplace=True)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(frame_data).fillna({'a': 0}, downcast='infer')", "code_tokens": " <mask> \n <mask>     # infer int64 from float64 when fillna value is a dict\n <mask>     df = pd.DataFrame({'a': [1., np.nan]})\n <mask>     result = df.fillna({'a': 0}, downcast='infer')\n <mask>     ray_df = from_pandas(df, num_partitions).fillna(\n <mask>         {'a': 0}, downcast='infer'\n <mask>     )\n <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_ffill2(num_partitions=2):\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     df = pandas.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions).fillna(0, downcast='infer')\n </s> add     ray_df = pd.DataFrame(frame_data).fillna(0, downcast='infer') </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     frame_data = {'a': [1., np.nan]}\n    df = pandas.DataFrame(frame_data) </s> remove def test_fillna_downcast(num_partitions=2):\n    # GH 15277\n </s> add def test_fillna_downcast(): </s> remove     ray_df = from_pandas(df, num_partitions).fillna(value={0: 0},\n                                                    inplace=True)\n </s> add     ray_df = pd.DataFrame(df).fillna(value={0: 0}, inplace=True)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "def test_ffill2():", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_df, result)\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_ffill2(num_partitions=2):\n <mask>     test_data = TestData()\n <mask>     test_data.tsframe['A'][:5] = np.nan\n <mask>     test_data.tsframe['A'][-5:] = np.nan\n <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions)\n <mask>     assert ray_df_equals_pandas(\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill'),\n        test_data.tsframe.fillna(method='ffill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='ffill'),\n                                test_data.tsframe.fillna(method='ffill')) </s> remove def test_bfill2(num_partitions=2):\n </s> add def test_bfill2(): </s> remove def test_bfill(num_partitions=2):\n </s> add def test_bfill(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe) </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.bfill(),\n        test_data.tsframe.bfill()\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.bfill(), test_data.tsframe.bfill())", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='ffill'),\n                                test_data.tsframe.fillna(method='ffill'))", "code_tokens": " <mask> def test_ffill2(num_partitions=2):\n <mask>     test_data = TestData()\n <mask>     test_data.tsframe['A'][:5] = np.nan\n <mask>     test_data.tsframe['A'][-5:] = np.nan\n <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions)\n <mask>     assert ray_df_equals_pandas(\n <mask>         ray_df.fillna(method='ffill'),\n <mask>         test_data.tsframe.fillna(method='ffill')\n <mask>     )\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_bfill2(num_partitions=2):\n <mask>     test_data = TestData()\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove def test_bfill2(num_partitions=2):\n </s> add def test_bfill2(): </s> remove def test_ffill2(num_partitions=2):\n </s> add def test_ffill2(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='bfill'),\n        test_data.tsframe.fillna(method='bfill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='bfill'),\n                                test_data.tsframe.fillna(method='bfill')) </s> remove def test_bfill(num_partitions=2):\n </s> add def test_bfill(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "def test_bfill2():", "code_tokens": " <mask>     )\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_bfill2(num_partitions=2):\n <mask>     test_data = TestData()\n <mask>     test_data.tsframe['A'][:5] = np.nan\n <mask>     test_data.tsframe['A'][-5:] = np.nan\n <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions)\n <mask>     assert ray_df_equals_pandas(\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill'),\n        test_data.tsframe.fillna(method='ffill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='ffill'),\n                                test_data.tsframe.fillna(method='ffill')) </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='bfill'),\n        test_data.tsframe.fillna(method='bfill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='bfill'),\n                                test_data.tsframe.fillna(method='bfill')) </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe) </s> remove def test_ffill2(num_partitions=2):\n </s> add def test_ffill2(): </s> remove def test_bfill(num_partitions=2):\n </s> add def test_bfill():", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='bfill'),\n                                test_data.tsframe.fillna(method='bfill'))", "code_tokens": " <mask> def test_bfill2(num_partitions=2):\n <mask>     test_data = TestData()\n <mask>     test_data.tsframe['A'][:5] = np.nan\n <mask>     test_data.tsframe['A'][-5:] = np.nan\n <mask>     ray_df = from_pandas(test_data.tsframe, num_partitions)\n <mask>     assert ray_df_equals_pandas(\n <mask>         ray_df.fillna(method='bfill'),\n <mask>         test_data.tsframe.fillna(method='bfill')\n <mask>     )\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_fillna_inplace(num_partitions=2):\n <mask>     df = pd.DataFrame(np.random.randn(10, 4))\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove def test_bfill2(num_partitions=2):\n </s> add def test_bfill2(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill'),\n        test_data.tsframe.fillna(method='ffill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='ffill'),\n                                test_data.tsframe.fillna(method='ffill')) </s> remove def test_ffill2(num_partitions=2):\n </s> add def test_ffill2(): </s> remove def test_bfill(num_partitions=2):\n </s> add def test_bfill(): </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "def test_fillna_inplace():\n    frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data)", "code_tokens": " <mask>     )\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_fillna_inplace(num_partitions=2):\n <mask>     df = pd.DataFrame(np.random.randn(10, 4))\n <mask>     df[1][:4] = np.nan\n <mask>     df[3][-4:] = np.nan\n <mask> \n <mask>     ray_df = from_pandas(df, num_partitions)\n <mask>     df.fillna(value=0, inplace=True)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df) </s> remove     ray_df = from_pandas(test_data.tsframe, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='bfill'),\n        test_data.tsframe.fillna(method='bfill')\n    )\n </s> add     ray_df = pd.DataFrame(test_data.tsframe)\n    assert ray_df_equals_pandas(ray_df.fillna(method='bfill'),\n                                test_data.tsframe.fillna(method='bfill')) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df) </s> remove     ray_df = from_pandas(df, num_partitions).fillna(value={0: 0},\n                                                    inplace=True)\n </s> add     ray_df = pd.DataFrame(df).fillna(value={0: 0}, inplace=True) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(df)", "code_tokens": " <mask>     df = pd.DataFrame(np.random.randn(10, 4))\n <mask>     df[1][:4] = np.nan\n <mask>     df[3][-4:] = np.nan\n <mask> \n <mask>     ray_df = from_pandas(df, num_partitions)\n <mask>     df.fillna(value=0, inplace=True)\n <mask>     assert not ray_df_equals_pandas(ray_df, df)\n <mask> \n <mask>     ray_df.fillna(value=0, inplace=True)\n <mask>     assert ray_df_equals_pandas(ray_df, df)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df) </s> remove     ray_df = from_pandas(df, num_partitions).fillna(value={0: 0},\n                                                    inplace=True)\n </s> add     ray_df = pd.DataFrame(df).fillna(value={0: 0}, inplace=True) </s> remove def test_fillna_inplace(num_partitions=2):\n    df = pd.DataFrame(np.random.randn(10, 4))\n </s> add def test_fillna_inplace():\n    frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data) </s> remove             engine='python',\n            parser='pandas', inplace=True)\n </s> add             engine='python', parser='pandas', inplace=True) </s> remove             engine='python',\n            parser='pandas', inplace=True)\n </s> add             engine='python', parser='pandas', inplace=True)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(df).fillna(value={0: 0}, inplace=True)", "code_tokens": " <mask> \n <mask>     ray_df.fillna(value=0, inplace=True)\n <mask>     assert ray_df_equals_pandas(ray_df, df)\n <mask> \n <mask>     ray_df = from_pandas(df, num_partitions).fillna(value={0: 0},\n <mask>                                                     inplace=True)\n <mask>     assert ray_df is None\n <mask> \n <mask>     df[1][:4] = np.nan\n <mask>     df[3][-4:] = np.nan\n <mask>     ray_df = from_pandas(df, num_partitions)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df) </s> remove def test_fillna_inplace(num_partitions=2):\n    df = pd.DataFrame(np.random.randn(10, 4))\n </s> add def test_fillna_inplace():\n    frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df) </s> remove     df = pd.DataFrame({'a': [1., np.nan]})\n </s> add     df = pandas.DataFrame(frame_data)", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(df)", "code_tokens": " <mask>     assert ray_df is None\n <mask> \n <mask>     df[1][:4] = np.nan\n <mask>     df[3][-4:] = np.nan\n <mask>     ray_df = from_pandas(df, num_partitions)\n <mask>     df.fillna(method='ffill', inplace=True)\n <mask> \n <mask>     assert not ray_df_equals_pandas(ray_df, df)\n <mask> \n <mask>     ray_df.fillna(method='ffill', inplace=True)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df, num_partitions).fillna(value={0: 0},\n                                                    inplace=True)\n </s> add     ray_df = pd.DataFrame(df).fillna(value={0: 0}, inplace=True) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df) </s> remove     assert ray_df_equals_pandas(\n        ray_df.fillna(method='ffill', axis=1),\n        df.fillna(method='ffill', axis=1)\n    )\n </s> add     assert ray_df_equals_pandas(ray_df.fillna(method='ffill', axis=1),\n                                df.fillna(method='ffill', axis=1)) </s> remove def test_fillna_inplace(num_partitions=2):\n    df = pd.DataFrame(np.random.randn(10, 4))\n </s> add def test_fillna_inplace():\n    frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data) </s> remove     ray_df = from_pandas(df, num_partitions)\n </s> add     ray_df = pd.DataFrame(df)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "def test_frame_fillna_limit():", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_df, df)\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_frame_fillna_limit(num_partitions=2):\n <mask>     index = np.arange(10)\n <mask>     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n <mask> \n <mask>     expected = df[:2].reindex(index)\n <mask>     expected = expected.fillna(method='pad', limit=5)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n </s> add     frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data, index=index) </s> remove     ray_df = from_pandas(df[:2].reindex(index), num_partitions).fillna(\n        method='pad', limit=5\n    )\n </s> add     ray_df = pd.DataFrame(df[:2].reindex(index)).fillna(method='pad', limit=5) </s> remove def test_frame_pad_backfill_limit(num_partitions=2):\n </s> add def test_frame_pad_backfill_limit(): </s> remove     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n </s> add     frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data, index=index) </s> remove     ray_df = from_pandas(result, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='pad', limit=5),\n        result.fillna(method='pad', limit=5)\n    )\n </s> add     ray_df = pd.DataFrame(result)\n    assert ray_df_equals_pandas(ray_df.fillna(method='pad', limit=5),\n                                result.fillna(method='pad', limit=5))", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data, index=index)", "code_tokens": " <mask> \n <mask> @pytest.fixture\n <mask> def test_frame_fillna_limit(num_partitions=2):\n <mask>     index = np.arange(10)\n <mask>     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n <mask> \n <mask>     expected = df[:2].reindex(index)\n <mask>     expected = expected.fillna(method='pad', limit=5)\n <mask> \n <mask>     ray_df = from_pandas(df[:2].reindex(index), num_partitions).fillna(\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove def test_frame_fillna_limit(num_partitions=2):\n </s> add def test_frame_fillna_limit(): </s> remove     ray_df = from_pandas(df[:2].reindex(index), num_partitions).fillna(\n        method='pad', limit=5\n    )\n </s> add     ray_df = pd.DataFrame(df[:2].reindex(index)).fillna(method='pad', limit=5) </s> remove def test_frame_pad_backfill_limit(num_partitions=2):\n </s> add def test_frame_pad_backfill_limit(): </s> remove     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n </s> add     frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data, index=index) </s> remove     ray_df = from_pandas(result, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='pad', limit=5),\n        result.fillna(method='pad', limit=5)\n    )\n </s> add     ray_df = pd.DataFrame(result)\n    assert ray_df_equals_pandas(ray_df.fillna(method='pad', limit=5),\n                                result.fillna(method='pad', limit=5))", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(df[:2].reindex(index)).fillna(method='pad', limit=5)", "code_tokens": " <mask> \n <mask>     expected = df[:2].reindex(index)\n <mask>     expected = expected.fillna(method='pad', limit=5)\n <mask> \n <mask>     ray_df = from_pandas(df[:2].reindex(index), num_partitions).fillna(\n <mask>         method='pad', limit=5\n <mask>     )\n <mask>     assert ray_df_equals_pandas(ray_df, expected)\n <mask> \n <mask>     expected = df[-2:].reindex(index)\n <mask>     expected = expected.fillna(method='backfill', limit=5)\n <mask>     ray_df = from_pandas(df[-2:].reindex(index), num_partitions).fillna(\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df[-2:].reindex(index), num_partitions).fillna(\n        method='backfill', limit=5\n    )\n </s> add     ray_df = pd.DataFrame(df[-2:].reindex(index)).fillna(method='backfill',\n                                                         limit=5) </s> remove     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n </s> add     frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data, index=index) </s> remove def test_frame_fillna_limit(num_partitions=2):\n </s> add def test_frame_fillna_limit(): </s> remove     # GH 5628\n    df = pd.DataFrame(np.random.randn(10, 3), columns=list('abc'))\n    ray_df = from_pandas(df, 2)\n </s> add     frame_data = np.random.randn(10, 3)\n    df = pandas.DataFrame(frame_data, columns=list('abc'))\n    ray_df = pd.DataFrame(frame_data, columns=list('abc')) </s> remove     ray_df = from_pandas(result, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='pad', limit=5),\n        result.fillna(method='pad', limit=5)\n    )\n </s> add     ray_df = pd.DataFrame(result)\n    assert ray_df_equals_pandas(ray_df.fillna(method='pad', limit=5),\n                                result.fillna(method='pad', limit=5))", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    ray_df = pd.DataFrame(df[-2:].reindex(index)).fillna(method='backfill',\n                                                         limit=5)", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_df, expected)\n <mask> \n <mask>     expected = df[-2:].reindex(index)\n <mask>     expected = expected.fillna(method='backfill', limit=5)\n <mask>     ray_df = from_pandas(df[-2:].reindex(index), num_partitions).fillna(\n <mask>         method='backfill', limit=5\n <mask>     )\n <mask>     assert ray_df_equals_pandas(ray_df, expected)\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_frame_pad_backfill_limit(num_partitions=2):\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(df[:2].reindex(index), num_partitions).fillna(\n        method='pad', limit=5\n    )\n </s> add     ray_df = pd.DataFrame(df[:2].reindex(index)).fillna(method='pad', limit=5) </s> remove def test_frame_fillna_limit(num_partitions=2):\n </s> add def test_frame_fillna_limit(): </s> remove def test_frame_pad_backfill_limit(num_partitions=2):\n </s> add def test_frame_pad_backfill_limit(): </s> remove     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n </s> add     frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data, index=index) </s> remove     mat = rdf.DataFrame(test_data.frame).as_matrix(['A', 'B'])\n </s> add     mat = pd.DataFrame(test_data.frame).as_matrix(['A', 'B'])", "label_window": ["keep", "keep", "keep", "keep", "replace", "replace", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "def test_frame_pad_backfill_limit():", "code_tokens": " <mask>     assert ray_df_equals_pandas(ray_df, expected)\n <mask> \n <mask> \n <mask> @pytest.fixture\n <mask> def test_frame_pad_backfill_limit(num_partitions=2):\n <mask>     index = np.arange(10)\n <mask>     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n <mask> \n <mask>     result = df[:2].reindex(index)\n <mask>     ray_df = from_pandas(result, num_partitions)\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n </s> add     frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data, index=index) </s> remove     ray_df = from_pandas(result, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='pad', limit=5),\n        result.fillna(method='pad', limit=5)\n    )\n </s> add     ray_df = pd.DataFrame(result)\n    assert ray_df_equals_pandas(ray_df.fillna(method='pad', limit=5),\n                                result.fillna(method='pad', limit=5)) </s> remove def test_frame_fillna_limit(num_partitions=2):\n </s> add def test_frame_fillna_limit(): </s> remove     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n </s> add     frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data, index=index) </s> remove     ray_df = from_pandas(df[-2:].reindex(index), num_partitions).fillna(\n        method='backfill', limit=5\n    )\n </s> add     ray_df = pd.DataFrame(df[-2:].reindex(index)).fillna(method='backfill',\n                                                         limit=5)", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
{"docstring_tokens": "    frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data, index=index)", "code_tokens": " <mask> \n <mask> @pytest.fixture\n <mask> def test_frame_pad_backfill_limit(num_partitions=2):\n <mask>     index = np.arange(10)\n <mask>     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n <mask> \n <mask>     result = df[:2].reindex(index)\n <mask>     ray_df = from_pandas(result, num_partitions)\n <mask>     assert ray_df_equals_pandas(\n <mask>         ray_df.fillna(method='pad', limit=5),\n </s> [DataFrame] Fixing the code formatting of the tests (#2123)\n\n* Fixing the code formatting of the tests\r\n\r\n* Fixing tests and removing from_pandas\r\n\r\n* Addressing comment\r\n\r\n* Addressing comments\r\n\r\n* Fix lint </s> remove     ray_df = from_pandas(result, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='pad', limit=5),\n        result.fillna(method='pad', limit=5)\n    )\n </s> add     ray_df = pd.DataFrame(result)\n    assert ray_df_equals_pandas(ray_df.fillna(method='pad', limit=5),\n                                result.fillna(method='pad', limit=5)) </s> remove def test_frame_pad_backfill_limit(num_partitions=2):\n </s> add def test_frame_pad_backfill_limit(): </s> remove def test_frame_fillna_limit(num_partitions=2):\n </s> add def test_frame_fillna_limit(): </s> remove     df = pd.DataFrame(np.random.randn(10, 4), index=index)\n </s> add     frame_data = np.random.randn(10, 4)\n    df = pandas.DataFrame(frame_data, index=index) </s> remove     ray_df = from_pandas(result, num_partitions)\n    assert ray_df_equals_pandas(\n        ray_df.fillna(method='backfill', limit=5),\n        result.fillna(method='backfill', limit=5)\n    )\n </s> add     ray_df = pd.DataFrame(result)\n    assert ray_df_equals_pandas(ray_df.fillna(method='backfill', limit=5),\n                                result.fillna(method='backfill', limit=5))", "label_window": ["keep", "keep", "keep", "keep", "replace", "keep", "keep", "keep", "keep", "keep"], "html_url": "https://github.com/ray-project/ray/commit/74cca3b28414e05e8302f3559e866a0ccf4d5b4c", "file_name": "python/ray/dataframe/test/test_dataframe.py"}
